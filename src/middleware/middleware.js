const User = require('../model/user')
const cveSchema = require('./jsonSchema')
const logger = require('./logger')
const Validator = require('jsonschema').Validator
const v = new Validator()
const uuidAPIKey = require('uuid-apikey')

const validateUser = (req, res, next) => {
  const cna = req.header('CVE-API-CNA')
  const submitter = req.header('CVE-API-SUBMITTER')
  const secret = req.header('CVE-API-SECRET')

  if (cna === undefined) {
    return res.status(400).json({ message: 'Bad Request: CVE-API-CNA header field required.' })
  }

  if (submitter === undefined) {
    return res.status(400).json({ message: 'Bad Request: CVE-API-SUBMITTER header field required.' })
  }

  if (secret === undefined) {
    return res.status(400).json({ message: 'Bad Request: CVE-API-SECRET header field required.' })
  }

  logger.info('Authenticating user: ' + submitter)

  User.findOne()
    .byUserNameAndCnaShortName(submitter, cna)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).json({ message: 'Internal Server Error' })
      }

      if (!result) {
        logger.warn('User not found. User authentication FAILED for ' + submitter)
        return res.status(401).json({ message: 'Unauthorized' })
      }

      if (uuidAPIKey.toAPIKey(result.secret) !== secret) {
        logger.warn('Incorrect apikey. User authentication FAILED for ' + submitter)
        return res.status(401).json({ message: 'Unauthorized' })
      }

      logger.info('SUCCESSFUL user authentication for ' + submitter)
      next()
    })
}

// TODO: Request body sanitation, better user messages, and use correct status codes
const validateCveJsonSchema = (req, res, next) => {
  if (req.method === 'POST') {
    const cve = req.body
    const cveState = cve.CVE_data_meta.STATE
    let schema
    logger.info('Validating CVE JSON schema.')

    // For validating schema 4.0
    // const schema = cveSchema.cveSchema4

    // For validating schema 5.0
    if (cveState === 'PUBLIC') {
      schema = cveSchema.publicSchema
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.1.json?20190610')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v3.0.json?20170531')
      v.addSchema(schema, '/https://www.first.org/cvss/cvss-v2.0.json?20170531')
    } else if (cveState === 'RESERVED') {
      schema = cveSchema.reservedSchema
    } else if (cveState === 'REJECT') {
      schema = cveSchema.rejectSchema
    } else {
      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: ['instance.CVE_data_meta.STATE is not one of enum values'] })
    }

    const result = v.validate(cve, schema, { nestedErrors: true })

    if (result.valid) {
      logger.info('SUCCESSFUL CVE JSON schema validation.')
      next()
    } else {
      logger.error(result)
      logger.error('CVE JSON schema validation FAILED.')

      const temp = result.toString().split('\n')
      const errors = []
      temp.forEach((error) => {
        if (error !== '') {
          const array = error.split(':', 2)
          errors.push(array[1].trim())
        }
      })

      return res.status(400).json({ message: 'CVE JSON schema validation FAILED.', errors: errors })
    }
  } else if (req.method === 'GET') {
    logger.info('made it to schema middleware')
    next()
  } else {
    return res.status(400).send('Bad Request')
  }
}

module.exports = {
  validateUser,
  validateCveJsonSchema
}
