import * as express from "express";
import { admin } from "../index";
import { getRepository } from 'typeorm';
import { IGetUserAuthInfoRequest } from '~shared/constants';
import { User } from '../database/entities/user.entity';


const restricted_endpoints: string[] = [
  '/graphql', '/api'
];

export function verifyRestrictedEndpoints(req: IGetUserAuthInfoRequest, res: express.Response, next: any) {
  const {url} = req;

  for (const restricted of restricted_endpoints) {
    if (url.search(restricted) === 0) {
      console.log(`verifying endpoint ${restricted}`);
      verifyJWTToken(req, res, next);
      return;
    }
  }
  
  // not a restricted url, continue the request normally
  next();
}

export async function verifyJWTToken(req: IGetUserAuthInfoRequest, res: express.Response, next: any) {

  try {
    // get token from request headers
    const token = req.headers.authorization as string;
    // if not token found, send 403
    if (!token) {
      res.status(403).send({ 
        auth: false, 
        message: "No token provided." 
      });
      return;
    }

    // check that user with the given id is created in db
    const userRepository = getRepository(User);
    const decodedToken = await admin.auth().verifyIdToken(token);
    const user = await userRepository.findOne({where:{userFirebaseUid : decodedToken.uid}});
    if(!user){
      const newUser = new User()
      newUser.userFirebaseUid = decodedToken.uid
      req.user = newUser
    } else{
      req.user = user;
    }

    next();
      
  } catch(error) {
    res
      .status(500)
      .send({ auth: false, message: "Failed to authenticate token." });
  }
};
