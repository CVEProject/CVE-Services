const User = require('../../model/user')
const Cna = require('../../model/cna')
const logger = require('../../middleware/logger')
const uuidAPIKey = require('uuid-apikey')

// TODO: Pagination
// MongoDB: Get the details of all cnas
async function getCnas (req, res) {
  Cna.find().exec((err, result) => {
    if (err) {
      logger.error(err.stack)
      return res.status(500).send('Internal Server Error')
    }

    if (result) {
      result.forEach((obj) => {
        const cna = Object.assign({}, obj)._doc
        delete cna._id
      })

      logger.info('The CNAs were sent to the user.')
      return res.status(200).json(result)
    }
  })
}

// TODO: Request parameter validation
// MongoDB: Get the details of a single cna for the specified shortname
async function getCna (req, res) {
  const shortName = req.params.shortname

  Cna.findOne()
    .byShortName(shortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result) {
        const cna = Object.assign({}, result)._doc
        delete cna._id

        logger.info({ message: shortName + ' CNA was sent to the user.' })
        return res.status(200).json(cna)
      } else {
        logger.info(shortName + ' CNA does not exist.')
        return res.status(404).json({ message: shortName + ' CNA does not exist.' })
      }
    })
}

// TODO: Request parameter validation
// Get the details of a single user for the specified username
async function getUser (req, res) {
  const username = req.params.username
  const cnaShortName = req.params.shortname

  User.findOne()
    .byUserNameAndCnaShortName(username, cnaShortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result) {
        const user = Object.assign({}, result)._doc
        delete user._id
        delete user.secret

        logger.info({ message: 'User ' + username + ' was sent to the user.' })
        return res.status(200).json(user)
      } else {
        logger.info('User ' + username + ' does not exist.')
        return res.status(404).json({ message: 'User ' + username + ' does not exist.' })
      }
    })
}

// TODO: Request body sanitation
// MongoDB: Creates a new cna only if the cna doesn't exist for the specified shortname. If the cna exists, it does not update the cna.
async function createCna (req, res) {
  const cna = req.body

  if (cna.short_name === undefined) {
    return res.status(400).json({ message: 'Provide the cna\'s name short name to create the cna.' })
  }

  if (cna.name === undefined) {
    return res.status(400).json({ message: 'Provide the cna\'s name to create the cna.' })
  }

  const newCna = new Cna(cna)

  // Find cna in MongoDB
  Cna.findOne()
    .byShortName(newCna.short_name)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      // Create cna in MongoDB if it doesn't exist
      if (!result) {
        Cna.findOneAndUpdate()
          .byShortName(newCna.short_name)
          .updateOne(newCna)
          .setOptions({ upsert: true })
          .exec((err) => {
            if (err) {
              logger.error(err.stack)
              return res.status(500).send('Internal Server Error')
            }

            const responseMessage = {
              message: newCna.short_name + ' CNA was successfully created in MongoDB.',
              created: newCna
            }

            logger.info(newCna.short_name + ' CNA was successfully created in MongoDB.')
            return res.status(200).json(responseMessage)
          })
      } else {
        logger.info(newCna.short_name + ' CNA was not created because it already exists.')
        return res.status(400).json({ message: newCna.short_name + ' CNA was not created because it already exists.' })
      }
    })

  // Cna.findOneAndUpdate()
  //   .byShortName(shortName)
  //   .updateOne(newCna)
  //   .setOptions({ upsert: true })
  //   .exec((err, result) => {
  //     if (err) {
  //       logger.error(err.stack)
  //       return res.status(500).send('Internal Server Error')
  //     }

  //     if (result.upserted) {
  //       logger.info(newCna.short_name + ' CNA was successfully created in MongoDB')
  //     } else {
  //       logger.info(newCna.name + ' CNA was successfully updated in MongoDB')
  //     }

  //     const responseMessage = {
  //       message: shortName + ' CNA was successfully created',
  //       created: newCna
  //     }

  //     return res.status(200).json(responseMessage)
  //   })
}

// TODO: Request body sanitation and parameter validation
// Updates a cna only if the cna exist for the specified shortname. If no cna exists, it does not create the cna.
async function updateCna (req, res) {
  const shortName = req.params.shortname
  const cna = req.body

  if (req.body.short_name !== undefined) {
    cna.short_name = req.body.short_name
  } else {
    cna.short_name = shortName
  }

  const newCna = new Cna(cna)
  Cna.findOneAndUpdate()
    .byShortName(newCna.short_name)
    .updateOne(newCna)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info(newCna.short_name + ' CNA could not be updated in MongoDB because it does not exist.')
        return res.status(400).json({ message: newCna.short_name + ' CNA could not be updated in MongoDB because it does not exist.' })
      }

      const responseMessage = {
        message: 'The cna was successfully updated in MongoDB.',
        updated: newCna
      }

      logger.info('The cna was successfully updated in MongoDB.')
      return res.status(200).json(responseMessage)
    })
}

// TODO: Request body sanitation and parameter validation
// Creates a user only if the cna exist and the user doesn't exist for the specified shortname and username respectively.
// If the user exists, it does not update the user.
async function createUser (req, res) {
  const cnaShortName = req.params.shortname
  const user = req.body

  if (req.body.username !== undefined) {
    user.username = req.body.username
  } else {
    return res.status(400).json({ message: 'To create a user a username must be provided.' })
  }

  if (req.body.cna_short_name !== undefined && req.body.cna_short_name !== cnaShortName) {
    return res.status(400).json({ message: cnaShortName + ' parameter does not match ' + req.body.cna_short_name + ' in the JSON body.' })
  } else {
    user.cna_short_name = cnaShortName
  }

  // Check the cna exists
  Cna.findOne()
    .byShortName(cnaShortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        logger.info('The user could not be created because ' + cnaShortName + ' CNA does not exist.')
        return res.status(400).json({ message: 'The user could not be created because ' + cnaShortName + ' CNA does not exist.' })
      }

      const key = uuidAPIKey.create()
      user.secret = key.uuid
      const newUser = new User(user)

      // Find user in MongoDB
      User.findOne()
        .byUserNameAndCnaShortName(newUser.username, cnaShortName)
        .exec((err, result) => {
          if (err) {
            logger.warn('An error ocurred in MongoDB. ' + newUser.username + ' was not found in the database.')
            logger.error(err.stack)
          }

          // Create user in MongoDB if it doesn't exist
          if (!result) {
            User.findOneAndUpdate()
              .byUserNameAndCnaShortName(newUser.username, cnaShortName)
              .updateOne(newUser)
              .setOptions({ upsert: true })
              .exec((err) => {
                if (err) {
                  logger.error(err.stack)
                  return res.status(500).send('Internal Server Error')
                }

                newUser.secret = key.apiKey
                const responseMessage = {
                  message: 'The user was successfully created in MongoDB.',
                  created: newUser
                }

                logger.info('The user was successfully created in MongoDB.')
                return res.status(200).json(responseMessage)
              })
          } else {
            logger.info(newUser.username + ' was not created in MongoDB because it already exists.')
            return res.status(400).json({ message: newUser.username + ' was not created in MongoDB because it already exists.' })
          }
        })

      // User.findOneAndUpdate()
      //   .byUserNameAndCnaShortName(newUser.username, cnaShortName)
      //   .updateOne(newUser)
      //   .setOptions({ upsert: true })
      //   .exec((err) => {
      //     if (err) {
      //       logger.error(err.stack)
      //       return res.status(500).send('Internal Server Error')
      //     }

      //     newUser.secret = key.apiKey
      //     const responseMessage = {
      //       message: 'The user was successfully updated',
      //       created: newUser
      //     }

      //     logger.info('The user was successfully created in MongoDB.')
      //     return res.status(200).json(responseMessage)
      //   })
    })
}

// TODO: Request body sanitation and parameter validation
// Updates a user only if the user exist for the specified username. If no user exists, it does not create the user.
async function updateUser (req, res) {
  const username = req.params.username
  const cnaShortName = req.params.shortname
  const user = req.body

  if (req.body.username !== undefined) {
    user.username = req.body.username
  } else {
    user.username = username
  }

  if (req.body.cna_short_name !== undefined) {
    user.cna_short_name = req.body.cna_short_name
  } else {
    user.cna_short_name = cnaShortName
  }

  const newUser = new User(user)
  User.findOneAndUpdate()
    .byUserNameAndCnaShortName(username, cnaShortName)
    .updateOne(newUser)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info('The user could not be updated in MongoDB because ' + username + ' does not exist.')
        return res.status(400).json({ message: 'The user could not be updated in MongoDB because ' + username + ' does not exist.' })
      }

      const responseMessage = {
        message: 'The user was successfully updated in MongoDB.',
        created: newUser
      }

      logger.info('The user was successfully updated in MongoDB.')
      return res.status(200).json(responseMessage)
    })
}

module.exports = {
  CNA_ALL: getCnas,
  CNA_SINGLE: getCna,
  CNA_CREATE_SINGLE: createCna,
  CNA_UPDATE_SINGLE: updateCna,
  USER_SINGLE: getUser,
  USER_CREATE_SINGLE: createUser,
  USER_UPDATE_SINGLE: updateUser
}
