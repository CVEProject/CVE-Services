const User = require('../../model/user')
const Cna = require('../../model/cna')
const logger = require('../../middleware/logger')
const uuidAPIKey = require('uuid-apikey')

// Get the details of all cnas
async function getCnas (req, res) {
  Cna.find().exec((err, result) => {
    if (err) {
      logger.error(err.stack)
      return res.status(500).send('Internal Server Error')
    }

    if (result) {
      result.forEach((obj) => {
        const cna = Object.assign({}, obj)._doc
        delete cna._id
      })
    }

    logger.info('The CNAs were sent to the user.')
    return res.status(200).json(result)
  })
}

// Get the details of a single cna for the specified shortname
async function getCna (req, res) {
  const shortName = req.params.shortname

  Cna.findOne()
    .byShortName(shortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        logger.info(shortName + ' CNA does not exist.')
        return res.status(404).json({ message: shortName + ' CNA does not exist.' })
      }

      const cna = Object.assign({}, result)._doc
      delete cna._id

      logger.info({ message: shortName + ' CNA was sent to the user.', cna: cna })
      return res.status(200).json(cna)
    })
}

// Get the details of a single user for the specified username
async function getUser (req, res) {
  const username = req.params.username
  const cnaShortName = req.params.shortname

  User.findOne()
    .byUserNameAndCnaShortName(username, cnaShortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        logger.info(username + ' does not exist.')
        return res.status(404).json({ message: username + ' does not exist.' })
      }

      const user = Object.assign({}, result)._doc
      delete user._id
      delete user.secret

      logger.info({ message: username + ' was sent to the user.', user: user })
      return res.status(200).json(user)
    })
}

// Creates a new cna only if the cna doesn't exist for the specified shortname. If the cna exists, it does not update the cna.
async function createCna (req, res) {
  const newCna = new Cna(req.body)

  if (newCna.short_name === undefined) {
    return res.status(400).json({ message: 'Provide the cna\'s short name to create the cna.' })
  }

  if (newCna.name === undefined) {
    return res.status(400).json({ message: 'Provide the cna\'s name to create the cna.' })
  }

  // Find cna in MongoDB
  Cna.findOne()
    .byShortName(newCna.short_name)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result) {
        logger.info(newCna.short_name + ' CNA was not created because it already exists.')
        return res.status(400).json({ message: newCna.short_name + ' CNA already exists.' })
      }

      // Create cna in MongoDB if it doesn't exist
      Cna.findOneAndUpdate()
        .byShortName(newCna.short_name)
        .updateOne(newCna)
        .setOptions({ upsert: true })
        .exec((err) => {
          if (err) {
            logger.error(err.stack)
            return res.status(500).send('Internal Server Error')
          }

          const responseMessage = {
            message: newCna.short_name + ' CNA was successfully created.',
            created: newCna
          }

          logger.info(JSON.stringify(responseMessage))
          return res.status(200).json(responseMessage)
        })
    })
}

// Updates a cna only if the cna exist for the specified shortname. If no cna exists, it does not create the cna.
async function updateCna (req, res) {
  const shortName = req.params.shortname
  const newCna = new Cna(req.body)

  if (newCna.short_name === undefined) {
    newCna.short_name = shortName
  }

  Cna.findOneAndUpdate()
    .byShortName(shortName)
    .updateOne(newCna)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info(shortName + ' CNA could not be updated in MongoDB because it does not exist.')
        return res.status(404).json({ message: shortName + ' CNA does not exist.' })
      }

      const responseMessage = {
        message: newCna.short_name + ' CNA was successfully updated.',
        updated: newCna
      }

      logger.info(JSON.stringify(responseMessage))
      return res.status(200).json(responseMessage)
    })
}

// Creates a user only if the cna exist and the user doesn't exist for the specified shortname and username respectively.
async function createUser (req, res) {
  const cnaShortName = req.params.shortname
  const newUser = new User(req.body)

  if (newUser.username === undefined) {
    return res.status(400).json({ message: 'To create a user, a username must be provided.' })
  }

  if (newUser.cna_short_name === undefined) {
    newUser.cna_short_name = cnaShortName
  }

  // If CNA shortname was provided in the body, it must match the one in the URL params
  if (newUser.cna_short_name !== cnaShortName) {
    return res.status(400).json({ message: cnaShortName + ' URL parameter does not match ' + newUser.cna_short_name + ' in the JSON body.' })
  }

  // Check the cna exists
  Cna.findOne()
    .byShortName(cnaShortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        logger.info('The user could not be created because ' + cnaShortName + ' CNA does not exist.')
        return res.status(400).json({ message: 'The user could not be created because ' + cnaShortName + ' CNA does not exist.' })
      }

      const key = uuidAPIKey.create()
      newUser.secret = key.uuid

      // Find user in MongoDB
      User.findOne()
        .byUserNameAndCnaShortName(newUser.username, cnaShortName)
        .exec((err, result) => {
          if (err) {
            logger.warn('An error ocurred: ' + newUser.username + ' was not found in the database.')
            logger.error(err.stack)
            return res.status(500).send('Internal Server Error')
          }

          if (result) {
            logger.info(newUser.username + ' was not created because it already exists.')
            return res.status(400).json({ message: newUser.username + ' already exists.' })
          }

          // Create user in MongoDB if it doesn't exist
          User.findOneAndUpdate()
            .byUserNameAndCnaShortName(newUser.username, cnaShortName)
            .updateOne(newUser)
            .setOptions({ upsert: true })
            .exec((err) => {
              if (err) {
                logger.error(err.stack)
                return res.status(500).send('Internal Server Error')
              }

              newUser.secret = key.apiKey
              const responseMessage = {
                message: newUser.username + ' was successfully created.',
                created: newUser
              }

              logger.info(JSON.stringify(responseMessage))
              return res.status(200).json(responseMessage)
            })
        })
    })
}

// Updates a user only if the user exist for the specified username. If no user exists, it does not create the user.
async function updateUser (req, res) {
  const username = req.params.username
  const cnaShortName = req.params.shortname
  const newUser = new User(req.body)

  if (newUser.username === undefined) {
    newUser.username = username
  }

  if (newUser.cna_short_name === undefined) {
    newUser.cna_short_name = cnaShortName
  }

  User.findOneAndUpdate()
    .byUserNameAndCnaShortName(username, cnaShortName)
    .updateOne(newUser)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (result.n === 0) {
        logger.info('The user could not be updated because ' + username + ' does not exist for ' + cnaShortName)
        return res.status(404).json({ message: username + ' could not be found.' })
      }

      const responseMessage = {
        message: username + ' was successfully updated.',
        updated: newUser
      }

      logger.info(JSON.stringify(responseMessage))
      return res.status(200).json(responseMessage)
    })
}

module.exports = {
  CNA_ALL: getCnas,
  CNA_SINGLE: getCna,
  CNA_CREATE_SINGLE: createCna,
  CNA_UPDATE_SINGLE: updateCna,
  USER_SINGLE: getUser,
  USER_CREATE_SINGLE: createUser,
  USER_UPDATE_SINGLE: updateUser
}
