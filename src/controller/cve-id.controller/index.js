const express = require('express')
const router = express.Router()
const mw = require('../../middleware/middleware')
const controller = require('./cve-id.controller')
const { param, query } = require('express-validator')
const { parseGetParams, parsePostParams, parseError, toDate } = require('./cve-id.middleware')
const CONSTANTS = require('../../constants')

const CHOICES = [CONSTANTS.CVE_STATES.REJECTED, CONSTANTS.CVE_STATES.PUBLISHED, CONSTANTS.CVE_STATES.RESERVED]
const MODIFYTARGETS = [CONSTANTS.CVE_STATES.REJECTED, CONSTANTS.CVE_STATES.RESERVED]

router.get('/cve-id',
  /*
  #swagger.tags = ['CVE ID']
  #swagger.operationId = 'cveIdGetFiltered'
  #swagger.summary = "Retrieves all CVE IDs entity owns after applying the query params"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see CVE-IDs owned by any Organization</p>
        <p><b>Admin User:</b> Can only see CVE-IDs owned by the Organization it belongs to</p>
        <p><b>Regular User:</b> Can only see CVE-IDs owned by the Organization it belongs to</p>"
  #swagger.parameters['$ref'] = [
    '#/components/parameters/cveIdGetFilteredState',
    '#/components/parameters/cveIdGetFilteredCveIdYear',
    '#/components/parameters/cveIdGetFilteredTimeReservedLt',
    '#/components/parameters/cveIdGetFilteredTimeReservedGt',
    '#/components/parameters/cveIdGetFilteredTimeModifiedLt',
    '#/components/parameters/cveIdGetFilteredTimeModifiedGt',
    '#/components/parameters/pageQuery',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'A filtered list of CVE-ID records the organization owns given the query parameters.',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/cve-id/list-cve-ids-response.json' }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.validateUser,
  query(['page']).optional().isInt({ min: CONSTANTS.PAGINATOR_PAGE }),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(CHOICES),
  query(['cve_id_year']).optional().isNumeric().matches(/^[0-9]{4}$/),
  query(['time_reserved.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_reserved.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.lt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  query(['time_modified.gt']).optional().isString().trim().escape().customSanitizer(val => { return toDate(val) }).not().isEmpty(),
  parseError,
  parseGetParams,
  controller.CVEID_GET_FILTER)
router.post('/cve-id',
  /*
  #swagger.tags = ['CVE ID']
  #swagger.operationId = 'cveIdReserve'
  #swagger.summary = "Reserves CVE-ID records for the organization provided in the short_name query parameter"
  #swagger.description = "
  <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>CNA:</b> The user must belong to an Organization with the “CNA” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can reserve CVE-IDs for any Organization</p>
        <p><b>CNA:</b> Can only reserve CVE-IDs for its Organization</p>"
  #swagger.parameters['$ref'] = [
    '#/components/parameters/amount',
    '#/components/parameters/batch_type',
    '#/components/parameters/cve_year',
    '#/components/parameters/short_name',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'A list of the newly reserved CVE-IDs.',
    content: {
      'application/json': {
        schema: { $ref: '/schemas/cve-id/create-cve-ids-response.json' }
      }
    }
  }
  #swagger.responses[206] = {
    description: 'A partial list of the CVE-IDs the IDR service managed to reserve before encountering a case where no more CVE IDs could be reserved.',
    content: {
      'application/json': {
        schema: { $ref: '/schemas/cve-id/create-cve-ids-partial-response.json' }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.validateUser,
  mw.onlyCnas,
  query(['amount']).isInt(),
  query(['batch_type']).optional().isString().trim().escape().customSanitizer(val => { return val.toLowerCase() }),
  query(['short_name']).isString().trim().escape(),
  query(['cve_year']).isNumeric().matches(/^[0-9]{4}$/),
  parseError,
  parsePostParams,
  controller.CVEID_RESERVE)
router.get('/cve-id/:id',
  /*
  #swagger.tags = ['CVE ID']
  #swagger.operationId = 'cveIdGetSingle'
  #swagger.summary = "Retrieves a CVE-ID record by ID, can be a cve id the entity doesn't own if in a PUBLISHED or REJECTED state"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>No roles needed to access the endpoint</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can see the full information of a CVE-ID owned by any Organization</p>
        <p><b>Admin User:</b> Can see full information of a CVE-ID owned by the Organization it belongs to, and can only see partial information of a CVE-ID in the “PUBLISHED” or “REJECTED” state that is owned by another Organization</p>
        <p><b>Regular User:</b> Can see full information of a CVE-ID owned by the Organization it belongs to, and can only see partial information of a CVE-ID in the “PUBLISHED” or “REJECTED” state that is owned by another Organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being submitted.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'The requested CVE-ID record is returned.',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/cve-id/get-cve-id-response.json' }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.validateUser,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/, 'i'),
  parseError,
  parseGetParams,
  controller.CVEID_GET_SINGLE)
router.put('/cve-id/:id',
  /*
  #swagger.tags = ['CVE ID']
  #swagger.operationId = 'cveIdUpdateSingle'
  #swagger.summary = "Updates a CVE-ID record by ID"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can update a CVE-ID owned by any Organization</p>"
  #swagger.parameters['id'] = { description: 'The CVE ID for which the record is being submitted.' }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/org`,
    '#/components/parameters/state',
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'The updated CVE-ID record is returned.',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/cve-id/get-cve-id-response.json' }
      }
    }
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.validateUser,
  mw.onlyCnas,
  param(['id']).isString().matches(/^CVE-[0-9]{4}-[0-9]{4,}$/, 'i'),
  query(['state']).optional().isString().trim().escape().customSanitizer(val => { return val.toUpperCase() }).isIn(MODIFYTARGETS),
  query(['org']).optional().isString().trim().escape(),
  parseError,
  parsePostParams,
  mw.cnaMustOwnID,
  controller.CVEID_UPDATE_SINGLE)
router.post('/cve-id-range/:year',
  /*
  #swagger.tags = ['CVE ID']
  #swagger.operationId = 'cveIdRangeCreate'
  #swagger.summary = "Updates a CVE-ID record by ID"
  #swagger.description = "
        <h2>Access Control</h2>
        <p>At least one of the following roles are needed to access the endpoint:</p>
        <p>- <b>SECRETARIAT:</b> The user must belong to an Organization with the “SECRETARIAT” role</p>
        <h2>Expected Behavior</h2>
        <p><b>Secretariat:</b> Can create a CVE-ID-Range record for the specified year</p>"
  #swagger.parameters['year'] = {
    description: 'The year of the CVE-ID-Range record.',
    schema: {
      type: 'integer'
    }
  }
  #swagger.parameters['$ref'] = [
    '#/components/parameters/apiEntityHeader',
    '#/components/parameters/apiUserHeader',
    '#/components/parameters/apiSecretHeader'
  ]
  #swagger.responses[200] = {
    description: 'The CVE-ID-Range entity was created.',
  }
  #swagger.responses[400] = {
    description: 'Bad Request',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/bad-request.json' }
      }
    }
  }
  #swagger.responses[401] = {
    description: 'Not Authenticated',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[403] = {
    description: 'Forbidden',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[404] = {
    description: 'Not Found',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  #swagger.responses[500] = {
    description: 'Internal Server Error',
    content: {
      "application/json": {
        schema: { $ref: '/schemas/errors/generic.json' }
      }
    }
  }
  */
  mw.onlySecretariat,
  mw.validateUser,
  param(['year']).isNumeric().matches(/^[0-9]{4}$/),
  parseError,
  parsePostParams,
  controller.CVEID_RANGE_CREATE)

module.exports = router
