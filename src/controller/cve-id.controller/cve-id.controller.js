require('dotenv').config()
const CveId = require('../../model/cve-id')
const CveIdRange = require('../../model/cve-id-range')
const Org = require('../../model/org')
const User = require('../../model/user')
const logger = require('../../middleware/logger')
const CONSTANTS = require('../../constants')
const utils = require('../../utils/utils')

async function getCveId (req, res) {
  const id = req.ctx.params.id
  const cnaShortName = req.header(CONSTANTS.AUTH_HEADERS.ORG)

  CveId.findOne()
    .byCveId(id)
    .exec(async (err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).json({ error: 'INTERNAL_SERVER_ERROR', message: 'Internal Server Error' })
      }

      if (!result || result.state === 'AVAILABLE') {
        return res.status(404).json({ error: 'NOT_FOUND', message: id + ' not found' })
      }

      const orgUUID = await utils.getOrgUUID(cnaShortName) // cnaShortname is not null
      const isSecretariat = await utils.isSecretariatUUID(orgUUID)

      // the requester is not the owning org or the secretariat
      if (orgUUID !== result.owning_cna && !isSecretariat) {
        if (result.state === 'RESERVED') {
          const cveId = Object.assign({}, result)._doc // clone cve id returned from the db
          delete cveId._id

          logger.info({ message: id + ' is ' + result.state + '. A 404 status was sent to the requester.', cveId: cveId })
          return res.status(404).json({ error: 'NOT_FOUND', message: id + ' not found' })
        }

        const cveId = {
          cve_id: result.cve_id,
          cve_year: result.cve_year,
          state: result.state,
          owning_cna: (await Org.findOne().byUUID(result.owning_cna)).short_name
        }

        logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
        return res.status(200).json(cveId)
      } else {
        // the requester is the owning org or the secretariat
        const cveId = Object.assign({}, result)._doc // clone cve id returned from the db
        cveId.owning_cna = (await Org.findOne().byUUID(result.owning_cna)).short_name
        cveId.requested_by.cna = (await Org.findOne().byUUID(result.requested_by.cna)).short_name
        cveId.requested_by.user = (await User.findOne().byUUID(result.requested_by.user)).username
        delete cveId._id

        if (cveId.__v !== undefined) {
          delete cveId.__v
        }

        logger.info({ message: id + ' record was sent to the user.', cveId: cveId })
        return res.status(200).json(cveId)
      }
    })
}

async function getFilteredCveId (req, res) {
  const cnaShortName = req.header(CONSTANTS.AUTH_HEADERS.ORG)
  let state
  let year
  const timestamps = {
    timeReserved: [],
    dateOperator: []
  }
  let returned = false
  const isSecretariat = await utils.isSecretariat(cnaShortName)

  Object.keys(req.ctx.query).forEach(k => {
    const key = k.toLowerCase()

    if (!returned) {
      if (key === 'state') {
        state = req.ctx.query.state
      } else if (key === 'cve_id_year') {
        year = req.ctx.query.cve_id_year
      } else if (key === 'time_reserved.lt') {
        timestamps.dateOperator.push('lt')
        timestamps.timeReserved.push(req.ctx.query['time_reserved.lt'])
      } else if (key === 'time_reserved.gt') {
        timestamps.dateOperator.push('gt')
        timestamps.timeReserved.push(req.ctx.query['time_reserved.gt'])
      } 
    }
  })

  const query = {
    state: { $ne: 'AVAILABLE' }
  }

  if (!isSecretariat && !returned) {
    query.owning_cna = await utils.getOrgUUID(cnaShortName)
  }

  if (year && !returned) {
    query.cve_year = year
  }

  if (state && !returned) {
    if (state === 'AVAILABLE') {
      returned = true
      return res.status(404).json({ error: 'NOT_FOUND', message: 'No CVE IDs were found for the specified query parameters.' })
    }

    query.state = state
  }

  if (timestamps.timeReserved.length > 0 && !returned) {
    query.reserved = {}

    for (let i = 0; i < timestamps.timeReserved.length; i++) {
      if (timestamps.dateOperator[i] === 'lt') {
        query.reserved.$lt = timestamps.timeReserved[i]
      } else {
        query.reserved.$gt = timestamps.timeReserved[i]
      }
    }
  }

  if (!returned) {
    CveId.aggregate([
      {
        $match: query
      },
      {
        $lookup: {
          from: 'Org',
          localField: 'owning_cna',
          foreignField: 'UUID',
          as: 'ownerCna'
        }
      },
      {
        $unwind: '$ownerCna'
      },
      {
        $project: {
          _id: false,
          cve_id: true,
          cve_year: true,
          state: true,
          owning_cna: '$ownerCna.short_name',
          requested_by: true,
          reserved: true,
          time: true
        }
      },
      {
        $lookup: {
          from: 'User',
          localField: 'requested_by.user',
          foreignField: 'UUID',
          as: 'result'
        }
      },
      {
        $unwind: '$result'
      },
      {
        $project: {
          cve_id: true,
          cve_year: true,
          state: true,
          owning_cna: true,
          'requested_by.cna': '$result.org_UUID',
          'requested_by.user': '$result.username',
          reserved: true,
          time: true
        }
      },
      {
        $lookup: {
          from: 'Org',
          localField: 'requested_by.cna',
          foreignField: 'UUID',
          as: 'result'
        }
      },
      {
        $unwind: '$result'
      },
      {
        $project: {
          cve_id: true,
          cve_year: true,
          state: true,
          owning_cna: true,
          'requested_by.cna': '$result.short_name',
          'requested_by.user': true,
          reserved: true,
          time: true
        }
      }
    ])
      .exec((err, result) => {
        if (err) {
          logger.error(err.stack)
          return res.status(500).json({ error: 'INTERNAL_SERVER_ERROR', message: 'Internal Server Error' })
        }

        if (utils.isEmptyObject(result)) {
          result = []
        }

        if (!returned) {
          logger.info({ message: 'The CVEs were sent to the user.' })
          return res.status(200).json({ cve_ids: result })
        }
      })
  }
}

async function modifyCveId (req, res) {
  const id = req.ctx.params.id
  let returned = false
  let state
  let newCnaShortname
  let orgUUID

  if (req.ctx.query.state) {
    state = req.ctx.query.state
  }

  if (req.ctx.query.cna) {
    newCnaShortname = req.ctx.query.cna
  }

  if (state && !returned) {
    if (state === 'RESERVED') {
      returned = true
      return res.status(400).json({ message: 'Cannot change the state to RESERVED.' })
    } else if (state !== 'PUBLIC' && state !== 'REJECT') {
      returned = true
      return res.status(400).json({ message: 'Invalid CVE state.' })
    }
  }

  if (newCnaShortname && !returned) {
    orgUUID = await utils.getOrgUUID(newCnaShortname)

    if (!orgUUID) {
      returned = true
      logger.info(id + ' could not be reasigned to ' + newCnaShortname + ' in MongoDB because it does not exist.')
      return res.status(404).json({ message: newCnaShortname + ' CNA does not exist.' })
    }
  }

  CveId.findOne()
    .byCveId(id)
    .exec(async (err, result) => {
      if (err) {
        logger.error(err.stack)
        return res.status(500).send('Internal Server Error')
      }

      if (!result) {
        return res.status(404).json({ message: id + ' not found' })
      }

      const updatedCveId = Object.assign({}, result)._doc // clone cve id returned from the db
      delete updatedCveId._id
      delete updatedCveId.time

      if (state && !returned) {
        updatedCveId.state = state
      }

      if (newCnaShortname && !returned) {
        updatedCveId.owning_cna = orgUUID
      }

      result = await CveId.findOneAndUpdate({ cve_id: id }, updatedCveId, { new: true }) // update cve id
      const cveId = Object.assign({}, result)._doc // clone cve id returned from the db
      cveId.owning_cna = (await Org.findOne().byUUID(result.owning_cna)).short_name
      cveId.requested_by.cna = (await Org.findOne().byUUID(result.requested_by.cna)).short_name
      cveId.requested_by.user = (await User.findOne().byUUID(result.requested_by.user)).username
      delete cveId._id

      if (cveId.__v !== undefined) {
        delete cveId.__v
      }

      const responseMessage = {
        message: id + ' was successfully updated.',
        updated: cveId
      }

      logger.info(JSON.stringify(responseMessage))
      return res.status(200).json(responseMessage)
    })
}

async function reserveCveId (req, res) {
  const requester = req.header(CONSTANTS.AUTH_HEADERS.USER)
  const cnaShortName = req.header(CONSTANTS.AUTH_HEADERS.ORG)
  let returned = false
  let batchType
  let amount
  let shortName
  let year

  Object.keys(req.ctx.query).forEach(k => {
    const key = k.toLowerCase()

    if (key === 'amount') {
      amount = req.ctx.query.amount
    } else if (key === 'batch_type') {
      batchType = req.ctx.query.batch_type
    } else if (key === 'short_name') {
      shortName = req.ctx.query.short_name
    } else if (key === 'cve_year') {
      year = req.ctx.query.cve_year
    } 
  })

  const isSecretariat = await utils.isSecretariat(cnaShortName)
  if (cnaShortName !== shortName && !isSecretariat && !returned) {
    returned = true
    return res.status(403).json(CONSTANTS.CNA_CANNOT_RESERVE_FOR_OTHER)
  }

  if (!shortName && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.NO_CNA_SHORTNAME)
  }

  if (!year && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.NO_YEAR)
  }

  if (!amount && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.NO_AMOUNT)
  }

  if (amount <= 0 && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.INVALID_AMOUNT)
  }

  if (amount > 1 && !batchType && !returned) {
    returned = true
    return res.status(400).json(CONSTANTS.NO_BATCH_TYPE)
  }

  let result
  if (!returned) {
    result = await Org.findOne().byShortName(shortName)

    if (!result) {
      returned = true
      logger.info(shortName + ' CNA does not exist.')
      return res.status(403).json(CONSTANTS.CNA_DNE)
    }
  }

  let payload
  if (!returned) {
    payload = await getPayload(result)

    if (amount > payload.available) {
      returned = true
      CONSTANTS.OVER_ID_QUOTA.details = payload
      return res.status(403).json(CONSTANTS.OVER_ID_QUOTA)
    }
  }

  if (!returned) {
    result = await Org.findOneAndUpdate({ short_name: shortName, inUse: false }, { $set: { inUse: true } }, { new: true }) // set lock for org

    if (!result) {
      returned = true
      return res.status(403).json(CONSTANTS.RESERVATION_IN_PROGRESS)
    }
  }

  if (!returned) {
    if (batchType === undefined) { // priority
      await priorityReservation(year, amount, shortName, cnaShortName, requester, payload.available, res)
    } else if (batchType === 'sequential') {
      await sequentialReservation(year, amount, shortName, cnaShortName, requester, payload.available, false, res)
    } else if (batchType === 'non-sequential' || batchType === 'nonsequential') {
      await nonSequentialReservation(year, amount, shortName, cnaShortName, requester, payload.available, res)
    } else {
      return res.status(400).json(CONSTANTS.INVALID_BATCH_TYPE)
    }

    await Org.findOneAndUpdate({ short_name: shortName, inUse: true }, { $set: { inUse: false } }, { new: true }) // release lock for org
  }
}

async function priorityReservation (year, amount, shortName, cnaShortName, requester, availableIds, res) {
  let result = await CveIdRange.findOne({ cve_year: year })
  let returned = false
  let isFull = false

  // Cve Id Range for 'year' does not exists
  if (!result) {
    returned = true
    logger.info('CVE IDs for year ' + year + ' cannot be reserved at this time.')
    res.header(CONSTANTS.QUOTA_HEADER, availableIds)
    return res.status(403).json(CONSTANTS.CANNOT_RESERVE_FOR_YEAR)
  }

  if (!returned) {
    const endRange = parseInt(result.ranges.priority.end)
    result = await CveIdRange.findOneAndUpdate({ $and: [{ cve_year: year }, { 'ranges.priority.top_id': { $lt: endRange } }] }, { $inc: { 'ranges.priority.top_id': amount } }, { new: true })

    // priority id block is full, reserve id in sequential block
    if (!result) {
      isFull = true
      logger.info('Priority id block is full for year ' + year + ', reserving id in sequential block.')
      await sequentialReservation(year, amount, shortName, cnaShortName, requester, availableIds, true, res)
    }
  }

  if (!isFull && !returned) {
    const id = generateSequentialIds(year, result.ranges.priority.top_id, amount)
    const owningOrgUUID = await utils.getOrgUUID(shortName)
    const orgUUID = await utils.getOrgUUID(cnaShortName)
    const requesterUUID = (await User.findOne().byUserNameAndOrgUUID(requester, orgUUID)).UUID

    let cveIdDocuments = []
    const cveIdDocumentsUUID = []
    const cveIdUUID = new CveId()
    const cveId = new CveId()

    cveIdUUID.cve_id = cveId.cve_id = id[0]
    cveIdUUID.cve_year = cveId.cve_year = year
    cveIdUUID.state = cveId.state = 'RESERVED'
    cveIdUUID.owning_cna = owningOrgUUID // the org who gets assigned the reserved CVE IDs
    cveId.owning_cna = shortName
    cveIdUUID.reserved = cveId.reserved = Date.now()
    cveIdUUID.requested_by = {
      cna: orgUUID, // the org who requested the CVE IDs
      user: requesterUUID
    }
    cveId.requested_by = {
      cna: cnaShortName, // the org who requested the CVE IDs
      user: requester
    }

    cveIdDocumentsUUID.push(cveIdUUID) // list of cve ids with UUIDs
    cveIdDocuments.push(cveId) // list of cve ids with short name and username

    // Create a CveId document (reserve the CVE ID)
    await CveId.insertMany(cveIdDocumentsUUID) // reserve a cve id
    cveIdDocuments = cleanOutputSequential(cveIdDocuments)

    logger.info({ message: 'A priority CVE ID was reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_id: cveIdDocumentsUUID })
    res.header(CONSTANTS.QUOTA_HEADER, availableIds - amount)
    return res.status(200).json({ cve_ids: cveIdDocuments })
  }
}

async function sequentialReservation (year, amount, shortName, cnaShortName, requester, availableIds, isPriority, res) {
  let result = await CveIdRange.findOne({ cve_year: year })
  let topId
  let returned = false
  let isFull = false

  // Cve Id Range for 'year' does not exists
  if (!result) {
    returned = true
    logger.info('CVE IDs for year ' + year + ' cannot be reserved at this time.')
    res.header(CONSTANTS.QUOTA_HEADER, availableIds)
    return res.status(403).json(CONSTANTS.CANNOT_RESERVE_FOR_YEAR)
  }

  if (!returned) {
    topId = parseInt(result.ranges.general.top_id)
    amount = parseInt(amount)
    result = await CveIdRange.findOneAndUpdate({ $and: [{ cve_year: year }, { 'ranges.general.end': { $gt: (topId + amount - 1) } }] }, { $inc: { 'ranges.general.top_id': amount } }, { new: true })

    // The cve id block is full for sequential CVE IDs
    if (!result) {
      isFull = true
      returned = true

      if (isPriority) {
        logger.error('The cve id priority and sequential blocks are full for year ' + year + '. No more priority or sequential ids can be reserved at this time.')
      } else {
        logger.error('The cve id sequential block is full for year ' + year + '. No more sequential ids can be reserved at this time.')
      }

      res.header(CONSTANTS.QUOTA_HEADER, availableIds)
      return res.status(403).json(CONSTANTS.YEAR_RANGE_FULL)
    }
  }

  if (!isFull && !returned) {
    const ids = generateSequentialIds(year, result.ranges.general.top_id, amount)
    const owningOrgUUID = await utils.getOrgUUID(shortName)
    const orgUUID = await utils.getOrgUUID(cnaShortName)
    const requesterUUID = (await User.findOne().byUserNameAndOrgUUID(requester, orgUUID)).UUID
    let cveIdDocuments = []
    const cveIdDocumentsUUID = []
    let cveIdUUID
    let cveId

    ids.forEach(id => {
      cveIdUUID = new CveId()
      cveId = new CveId()
      cveIdUUID.cve_id = cveId.cve_id = id
      cveIdUUID.cve_year = cveId.cve_year = year
      cveIdUUID.state = cveId.state = 'RESERVED'
      cveIdUUID.owning_cna = owningOrgUUID // the org who gets assigned the reserved CVE IDs
      cveId.owning_cna = shortName
      cveIdUUID.reserved = cveId.reserved = Date.now()
      cveIdUUID.requested_by = {
        cna: orgUUID, // the org who requested the CVE IDs
        user: requesterUUID
      }
      cveId.requested_by = {
        cna: cnaShortName, // the org who requested the CVE IDs
        user: requester
      }

      cveIdDocumentsUUID.push(cveIdUUID) // list of cve ids with UUIDs
      cveIdDocuments.push(cveId) // list of cve ids with short name and username
    })

    // Create multiple CveId documents (reserve the CVE IDs)
    await CveId.insertMany(cveIdDocumentsUUID) // reserve cve ids
    cveIdDocuments = cleanOutputSequential(cveIdDocuments)

    if (isPriority) {
      logger.info({ message: 'The cve id priority block is full for year ' + year + '. A sequential CVE ID was reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_ids: cveIdDocumentsUUID })
    } else {
      logger.info({ message: 'Sequential CVE IDs were reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_ids: cveIdDocumentsUUID })
    }

    res.header(CONSTANTS.QUOTA_HEADER, availableIds - amount)
    return res.status(200).json({ cve_ids: cveIdDocuments })
  }
}

async function nonSequentialReservation (year, amount, shortName, cnaShortName, requester, availableIds, res) {
  let isFull = false
  let returned = false
  let available
  amount = parseInt(amount)
  let availableLimit = Math.max(3 * amount, CONSTANTS.DEFAULT_AVAILABLE_POOL)
  let result = await CveIdRange.findOne({ cve_year: year })

  // Cve Id Range for 'year' does not exists
  if (!result) {
    returned = true
    logger.info('CVE IDs for year ' + year + ' cannot be reserved at this time.')
    res.header(CONSTANTS.QUOTA_HEADER, availableIds)
    return res.status(403).json(CONSTANTS.CANNOT_RESERVE_FOR_YEAR)
  }

  if (!returned) {
    available = await CveId.find({ cve_year: year, state: 'AVAILABLE' }).limit(availableLimit) // get available ids

    // Case 1: Not enough IDs in the 'AVAILABLE' pool
    if (available.length < availableLimit) {
      result = await incrementNonSequentialPool(availableLimit, result.ranges.general.end, result.ranges.general.top_id, amount, available.length, year)
      isFull = result.isFull
      returned = result.returned

      if (isFull || returned) {
        logger.error('The cve id non-sequential block is full for year ' + year + '. No more sequential ids can be reserved at this time.')
        res.header(CONSTANTS.QUOTA_HEADER, availableIds)
        return res.status(403).json(CONSTANTS.YEAR_RANGE_FULL)
      }

      await allocateAvailableCveIds(result.ids, year) // Pool was incremented. Create 'AVAILABLE' cve ids.
      available = await CveId.find({ cve_year: year, state: 'AVAILABLE' }).limit(availableLimit) // get available ids
    }
  }

  // Case 2: Enough IDs in the 'AVAILABLE' pool
  let index
  let counter = 0
  const cveIdDocuments = []
  const cveIdDocumentsUUID = []
  const owningOrgUUID = await utils.getOrgUUID(shortName)
  const orgUUID = await utils.getOrgUUID(cnaShortName)
  const requesterUUID = (await User.findOne().byUserNameAndOrgUUID(requester, orgUUID)).UUID

  while ((counter < amount) && (!isFull && !returned)) {
    index = getRandomInt(0, available.length) // get random index in the available array
    result = await reserveNonSequentialCveId(index, available, year, shortName, cnaShortName, requester, owningOrgUUID, orgUUID, requesterUUID)

    if (result.isReserved) {
      cveIdDocuments.push(result.cveId) // add reserved cve id to the array of reserved cve ids
      cveIdDocumentsUUID.push(result.cveIdUUID) // add reserved cve id UUID to the array of reserved cve ids
      available.splice(index, 1) // remove reserved cve id from the 'AVAILABLE' pool
      counter++
    } else {
      available = await CveId.find({ cve_year: year, state: 'AVAILABLE' }).limit(availableLimit) // get available ids
      availableLimit = Math.max(3 * (amount - counter), CONSTANTS.DEFAULT_AVAILABLE_POOL) // recalculate the available limit since some ids might have been reserved

      // Case 1: Not enough IDs in the 'AVAILABLE' pool
      if (available.length < availableLimit) {
        result = await CveIdRange.findOne({ cve_year: year })
        result = await incrementNonSequentialPool(availableLimit, result.ranges.general.end, result.ranges.general.top_id, amount - counter, available.length, year)
        isFull = result.isFull
        returned = result.returned

        if (isFull || returned) {
          logger.info({ message: 'Only ' + counter + ' cve ids were reserved because there are not enough ids in the CVE ID non-sequential block. Non-sequential CVE IDs were reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_ids: cveIdDocumentsUUID })
          const partialError = CONSTANTS.RESERVED_PARTIAL_AMOUNT
          partialError.details = { amount_reserved: counter }
          partialError.cve_ids = cveIdDocuments
          res.header(CONSTANTS.QUOTA_HEADER, availableIds - counter)
          return res.status(206).json(partialError)
        }

        await allocateAvailableCveIds(result.ids, year) // Pool was incremented. Create 'AVAILABLE' cve ids.
        available = await CveId.find({ cve_year: year, state: 'AVAILABLE' }).limit(availableLimit) // get available ids
      }
    }
  }

  if (!isFull && !returned) {
    logger.info({ message: 'Non-sequential CVE IDs were reserved for \'' + shortName + '\' org on behalf of \'' + cnaShortName + '\' org.', cve_ids: cveIdDocumentsUUID })
    res.header(CONSTANTS.QUOTA_HEADER, availableIds - amount)
    return res.status(200).json({ cve_ids: cveIdDocuments })
  }
}

async function incrementNonSequentialPool (availableLimit, end, top, amount, available, year) {
  let increment = availableLimit - available + amount // the amount is the increment amount
  const endRange = parseInt(end)
  const topId = parseInt(top)

  // Cap increment to end of general CVE ID block
  if (endRange < (topId + increment)) {
    increment = endRange - topId
  }

  const result = {
    isFull: false,
    returned: false,
    ids: null
  }

  if (increment > 0) {
    let r = await CveIdRange.findOneAndUpdate({ $and: [{ cve_year: year }, { 'ranges.general.end': { $gte: increment } }] }, { $inc: { 'ranges.general.top_id': increment } }, { new: true })

    // Cap increment because it went over end of general block
    if (r.ranges.general.top_id > endRange) {
      increment = increment - (r.ranges.general.top_id - endRange) // adjusting real increment
      r = await CveIdRange.findOneAndUpdate({ cve_year: year }, { $set: { 'ranges.general.top_id': endRange } }, { new: true }) // Cap top_id to end of the block
    }

    if (increment > 0) {
      result.ids = generateSequentialIds(year, r.ranges.general.top_id, increment)
    } else if (available < amount) { // You hit the end of the boundary
      result.isFull = true
      result.returned = true
    }
  } else if (available < amount) { // You hit the end of the boundary
    result.isFull = true
    result.returned = true
  }

  return result
}

async function allocateAvailableCveIds (ids, year) {
  if (ids) {
    const cveIdDocuments = []
    let cveId

    ids.forEach(id => {
      cveId = new CveId()
      cveId.cve_id = id
      cveId.cve_year = year
      cveId.state = 'AVAILABLE'
      cveId.owning_cna = 'N/A' // the org who gets assigned the reserved CVE IDs
      cveId.reserved = Date.now()
      cveId.requested_by = {
        cna: 'N/A', // the org who requested the CVE IDs
        user: 'N/A'
      }

      cveIdDocuments.push(cveId)
    })

    await CveId.insertMany(cveIdDocuments) // Save the 'AVAILABLE' cve ids
  }
}

async function reserveNonSequentialCveId (index, available, year, shortName, cnaShortName, requester, owningOrgUUID, orgUUID, requesterUUID) {
  // Update available Cve Id
  const cveIdUUID = new CveId()
  const cveId = new CveId()

  cveIdUUID.cve_id = cveId.cve_id = available[index].cve_id
  cveIdUUID.cve_year = cveId.cve_year = year
  cveIdUUID.state = cveId.state = 'RESERVED'
  cveIdUUID.owning_cna = owningOrgUUID
  cveId.owning_cna = shortName // the org who gets assigned the reserved CVE IDs
  cveIdUUID.reserved = cveId.reserved = Date.now()
  cveIdUUID.requested_by = {
    cna: orgUUID, // the org who requested the CVE IDs
    user: requesterUUID
  }
  cveId.requested_by = {
    cna: cnaShortName, // the org who requested the CVE IDs
    user: requester
  }

  const result = {
    cveId: cveId,
    cveIdUUID: cveIdUUID,
    isReserved: await CveId.findOneAndUpdate({ cve_id: cveIdUUID.cve_id, state: 'AVAILABLE' }, cveIdUUID, { new: true })
  }

  return result
}

async function getPayload (org) {
  const payload = {
    id_quota: org.policies.id_quota
  }

  const result = await CveId.countDocuments({ owning_cna: org.UUID, state: 'RESERVED' })
  payload.total_reserved = result
  payload.available = (payload.id_quota - payload.total_reserved)

  return payload
}

function cleanOutputSequential (cveIdDocuments) {
  cveIdDocuments.forEach((obj) => {
    const cveId = Object.assign({}, obj)._doc
    delete cveId.time

    if (cveId.__v !== undefined) {
      delete cveId.__v
    }
  })

  return cveIdDocuments
}

function generateSequentialIds (year, topId, amount) {
  const start = topId - amount + 1 // before the pool 'AVAILABLE' pool increment
  const end = topId // after the 'AVAILABLE' pool increment
  const ids = []

  for (let i = start; i < end + 1; i++) {
    ids.push('CVE-' + year + '-' + String(i).padStart(4, '0'))
  }

  return ids
}

function getRandomInt (min, max) {
  min = Math.ceil(min)
  max = Math.floor(max)

  return Math.floor(Math.random() * (max - min) + min) // The maximum is exclusive and the minimum is inclusive
}

async function createCveIdRange (req, res) {
  const year = req.ctx.params.year
  const result = await CveIdRange.findOne({ cve_year: year })

  if (result) {
    logger.info('CVE Id Range document for year ' + year + ' already exists.')
    return res.status(400).json({ message: 'CVE Id Range document for year ' + year + ' was not created because it already exists.' })
  }

  const defaultDoc = CONSTANTS.DEFAULT_CVE_ID_RANGE
  defaultDoc.cve_year = year
  await CveIdRange.findOneAndUpdate({ cve_year: year }, defaultDoc, { upsert: true })

  logger.info('CVE Id Range document for year ' + year + ' was created.')
  return res.status(200).send()
}

module.exports = {
  CVEID_GET_SINGLE: getCveId,
  CVEID_RESERVE: reserveCveId,
  CVEID_GET_FILTER: getFilteredCveId,
  CVEID_UPDATE_SINGLE: modifyCveId,
  CVEID_RANGE_CREATE: createCveIdRange
}
