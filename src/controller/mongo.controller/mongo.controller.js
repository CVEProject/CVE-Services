const User = require('../../model/user')
const Cna = require('../../model/cna')
const logger = require('../../middleware/logger')

async function getCnas (req, res) {
  Cna.find().exec((err, result) => {
    if (err) {
      logger.error(err.stack)
      res.status(500).send('Internal Server Error')
    }

    logger.info('The CNAs were sent to the user.')
    res.status(200).json(result)
  })
}

async function getCna (req, res) {
  // not validated yet
  const shortName = req.params.id

  Cna.findOne()
    .byShortName(shortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The CNA was sent to the user.')
      res.status(200).json(result)
    })
}

// TODO: Request body sanitation <- in JSON Validator
/* Creates a new cna if one doesn't exist for the specified short_name in the request body. If one exists, it updates the cna. */
async function createCna (req, res) {
  // Safer to use due to atomicity
  Cna.findOneAndUpdate()
    .byShortName(req.body.short_name)
    .updateOne(req.body)
    .setOptions({ upsert: true })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The CNA was created or updated (if it already existed).')
      res.status(200).json(result)
    })
}

// TODO: Request body sanitation <- in JSON Validator
async function updateCna (req, res) {
  // not validated yet
  const shortName = req.params.id

  Cna.findOneAndUpdate()
    .byShortName(shortName)
    .updateOne({
      $set: {
        name: req.body.name,
        short_name: req.body.short_name
      }
    })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The CNA was updated.')
      res.status(200).json(result)
    })
}

async function deleteCna (req, res) {
  // not validated yet
  const shortName = req.params.id

  Cna.findOneAndRemove()
    .byShortName(shortName)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The CNA was deleted.')
      res.status(200).json(result)
    })
}

async function getUsers (req, res) {
  User.find().exec((err, result) => {
    if (err) {
      logger.error(err.stack)
      res.status(500).send('Internal Server Error')
    }

    logger.info('The users were sent to the user.')
    res.status(200).json(result)
  })
}

async function getUser (req, res) {
  // not validated yet
  const username = req.params.id

  User.findOne()
    .byUserName(username)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The user was sent to the user.')
      res.status(200).json(result)
    })
}

// TODO: Request body sanitation <- in JSON Validator
/* Creates a new user if one doesn't exist for the specified username in the body request. If one exists, it updates the user. */
async function createUser (req, res) {
  // Safer to use due to atomicity
  User.findOneAndUpdate()
    .byUserName(req.body.username)
    .updateOne(req.body)
    .setOptions({ upsert: true })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The user was created or updated (if it already existed).')
      res.status(200).json(result)
    })
}

// TODO: Request body sanitation <- in JSON Validator
async function updateUser (req, res) {
  // not validated yet
  const username = req.params.id

  User.findOneAndUpdate()
    .byUserName(username)
    .updateOne({
      $set: {
        username: req.body.username,
        cna_short_name: req.body.cna_short_name,
        name: req.body.name
      }
    })
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The user was updated.')
      res.status(200).json(result)
    })
}

async function deleteUser (req, res) {
  // not validated yet
  const username = req.params.id

  User.findOneAndRemove()
    .byUserName(username)
    .exec((err, result) => {
      if (err) {
        logger.error(err.stack)
        res.status(500).send('Internal Server Error')
      }

      logger.info('The CNA was deleted.')
      res.status(200).json(result)
    })
}

module.exports = {
  CNA_ALL: getCnas,
  CNA_SINGLE: getCna,
  CNA_CREATE_SINGLE: createCna,
  CNA_UPDATE_SINGLE: updateCna,
  CNA_DELETE_SINGLE: deleteCna,
  USER_ALL: getUsers,
  USER_SINGLE: getUser,
  USER_CREATE_SINGLE: createUser,
  USER_UPDATE_SINGLE: updateUser,
  USER_DELETE_SINGLE: deleteUser
}
