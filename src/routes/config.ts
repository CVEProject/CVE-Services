import 'reflect-metadata';
import { Application } from 'express';
import { buildSchema, AuthChecker } from 'type-graphql';
import * as graphqlHTTP from 'express-graphql';
import * as expressPlayground from 'graphql-playground-middleware-express';
import { OrganizationResolver } from '../database/graphql/resolvers/organization.resolver';
import { DevResolver } from '../database/graphql/resolvers/dev.resolver';
import { getRepository } from 'typeorm';
import { Organizations } from '../database/entities/organization.entity';
import { AdminResolver } from '../database/graphql/resolvers/admin.resolver';
import { CNAResolver } from '../database/graphql/resolvers/cna.resolver';
import { verifySignature } from './controllers/utils/rsa';

export async function configureRoutes(app: Application) {
    const schema = await buildSchema({
        resolvers: [OrganizationResolver, DevResolver, AdminResolver, CNAResolver],
        authChecker: customAuthChecker,
    });
    // graphql endpoint
    app.use(
        '/graphql',
        graphqlHTTP(req => ({
            schema: schema,
            graphiql: true,
            context: req,
        }))
    );

    app.use(
        '/playground',
        expressPlayground.default({
            endpoint: '/graphql',
        })
    );
}

export const customAuthChecker: AuthChecker = async ({ root, args, context, info }) => {
    if (info.fieldName === 'changeOrgStatus') {
        let organization = getRepository(Organizations);
        let org = await organization.findOne({ relations: ['admin', 'publicKey'], where: { organizationUUID: args.data.adminOrganizationUUID } });
        if (org === undefined) {
            return false;
        }
        if (org.admin.adminUUID) {
            const signatureVerification = verifySignature(args.data.payload, args.data.signature, org.publicKey.publicKey);
            if (signatureVerification) {
                return true;
            }
            return false;
        } else {
            return false;
        }
    }
};
