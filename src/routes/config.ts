import 'reflect-metadata';
import { Application } from 'express';
import { buildSchema, AuthChecker } from 'type-graphql';
import * as NodeRSA from 'node-rsa';
import * as graphqlHTTP from 'express-graphql';
import * as expressPlayground from 'graphql-playground-middleware-express';
import { OrganizationResolver } from '../database/graphql/resolvers/organization.resolver';
import { DevResolver } from '../database/graphql/resolvers/dev.resolver';
import { getRepository } from 'typeorm';
import { Organizations } from '../database/entities/organization.entity';
import { AdminResolver } from '../database/graphql/resolvers/admin.resolver';

export async function configureRoutes(app: Application) {
    const schema = await buildSchema({
        resolvers: [OrganizationResolver, DevResolver, AdminResolver],
        authChecker: customAuthChecker,
    });
    // graphql endpoint
    app.use(
        '/graphql',
        graphqlHTTP(req => ({
            schema: schema,
            graphiql: true,
            context: req,
        }))
    );

    app.use(
        '/playground',
        expressPlayground.default({
            endpoint: '/graphql',
        })
    );
}

export const customAuthChecker: AuthChecker = async ({ root, args, context, info }) => {
    let organization = getRepository(Organizations);
    let org = await organization.findOne({ relations: ['admin', 'publicKey'], where: { organizationUUID: args.data.adminOrganizationUUID } });

    if (org.admin.adminUUID) {
        let serverNodeRsa = new NodeRSA(org.publicKey.publicKey);
        serverNodeRsa.setOptions({ signingScheme: process.env.RSASigningSchema });
        let signatureVerification = serverNodeRsa.verify(args.data.payload, args.data.signature, null, 'hex') as boolean;
        if (signatureVerification) {
            return true;
        }
        return false;
    } else {
        return false;
    }
};
