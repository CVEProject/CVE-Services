const mongoose = require('mongoose')
const aggregatePaginate = require('mongoose-aggregate-paginate-v2')
const fs = require('fs')
const cveSchemaV5 = JSON.parse(fs.readFileSync('src/middleware/5.0_bundled_schema.json'))
const Ajv = require('ajv')
const addFormats = require('ajv-formats')
const ajv = new Ajv({ allErrors: true })
addFormats(ajv)
const validate = ajv.compile(cveSchemaV5)
const rejectedContainerSchema = JSON.parse(fs.readFileSync('src/middleware/schemas/cnaContainer.json'))
const validateCnaRejectedContainer = ajv.compile(rejectedContainerSchema)
const CONSTANTS = require('../constants')

const schema = {
  _id: false,
  time: {
    created: Date,
    modified: Date
  },
  cve: Object
}

const CveSchema = new mongoose.Schema(schema, { collection: 'Cve', timestamps: { createdAt: 'time.created', updatedAt: 'time.modified' } })

CveSchema.query.byCveId = function (cveId) {
  return this.where({ 'cve.cveMetadata.cveId': cveId })
}

CveSchema.statics.validateCveRecord = function (record) {
  const result = validate(record)
  if (result) {
    return true
  }
  return false
}

function createBaseCveMetadata (id, assigner, state) {
  const baseRecord = {
    dataType: 'CVE_RECORD',
    dataVersion: '5.0',
    cveMetadata: {
      cveId: id,
      assignerOrgId: assigner,
      state: state
    }
  }
  return baseRecord
}

CveSchema.statics.newPublishedCve = function (id, assigner, cnaContainer, sysProvidedCveMetadata = {}, sysProvidedProviderMetadata = {}) {
  const baseRecord = createBaseCveMetadata(id, assigner, CONSTANTS.CVE_STATES.PUBLISHED)

  const newCveMetadata = {
    ...baseRecord.cveMetadata,
    ...sysProvidedCveMetadata
  }

  baseRecord.cveMetadata = newCveMetadata

  cnaContainer.providerMetadata = {
    orgId: assigner,
    ...sysProvidedProviderMetadata
  }

  baseRecord.containers = { cna: cnaContainer }

  return baseRecord
}

function createRecordBase () {
  const baseRecord = {
    dataType: 'CVE_RECORD',
    dataVersion: '5.0'
  }
  return baseRecord
}

function createCveMetadata (id, assigner, state) {
  const cveMetadata = {
    cveMetadata: { id: id, assigner: assigner, state: state }
  }
  return cveMetadata
}

function createProviderMetadata (orgId, shortName) {
  const providerMetadata = {
    providerMetadata: { orgId: orgId, shortName: shortName, dateUpdated: (new Date()).toISOString() }
  }
  return providerMetadata
}

CveSchema.statics.newRejectedCve = function (cveId, reqBody, orgId, shortName) {
  const baseRecord = createRecordBase()
  const cveMetadata = createCveMetadata(cveId.id, cveId.assigner, CONSTANTS.CVE_STATES.REJECTED)
  const providerMetadata = createProviderMetadata(orgId, shortName)

  const cnaRejectedContainer = {
    providerMetadata,
    rejectedReasons: reqBody.rejectedReasons,
    replacedBy: reqBody.replacedBy
  }

  const finalRecord = {
    baseRecord,
    cveMetadata,
    containers: {
      cna: cnaRejectedContainer
    }
  }

  return finalRecord
}

CveSchema.statics.validateRejected = function (record) {
  const result = validateCnaRejectedContainer(record)
  if (result) {
    return true
  }
  return false
}

CveSchema.statics.updateCveToRejected = function (id, record, newCna) {
  record.containers = newCna // replace cna field on existing record
  const timeStamp = (new Date()).toISOString()
  record.cveMetadata.dateUpdated = timeStamp
  record.containers.cnaContainer.providerMetadata.dateUpdated = timeStamp
  // if record is in a PUBLISHED state, transition to a REJECTED state
  if (record.cveMetadata.state === CONSTANTS.CVE_STATES.PUBLISHED) {
    record.cveMetadata.cveId = id // update cveId
    record.cveMetadata.state = CONSTANTS.CVE_STATES.REJECTED // update state
    if (record.containers.adp) { // check if adp field exists
      delete record.containers.adp
    }
  }
  return record
}

CveSchema.plugin(aggregatePaginate)
const Cve = mongoose.model('Cve', CveSchema)

module.exports = Cve
