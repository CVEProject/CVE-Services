import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToOne, JoinColumn, ManyToOne, OneToMany } from 'typeorm';
import { IsEmail } from 'class-validator';
import { CommonVulnerabilitiesExposures } from './cve.entity';
import { Organizations } from './organization.entity';
import { Field, ID, ObjectType } from 'type-graphql';

enum CNAStatus {
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE',
}

enum CNAType {
    VENDOR = 'VENDOR',
    RESEARCHER = 'RESEARCHER',
    PUBLISHER = 'PUBLISHER',
    ORG_ADMIN = 'ADMIN',
}

@ObjectType()
@Entity()
export class CNANumberingAuthority {
    @Field(() => ID)
    @PrimaryGeneratedColumn('uuid')
    cnaUUID: string;

    @Field()
    @Column({
        type: 'varchar',
        nullable: false,
        unique: true,
    })
    cnaName: string;

    @Field()
    @Column({
        type: 'varchar',
        nullable: false,
    })
    cnaDescription: string;

    @Field()
    @Column({
        type: 'enum',
        enum: CNAStatus,
        default: CNAStatus.ACTIVE,
    })
    cnaStatus: CNAStatus;

    @Field()
    @Column({
        type: 'enum',
        enum: CNAType,
        default: CNAType.VENDOR,
    })
    cnaType: CNAType;

    @Field()
    @Column({
        type: 'varchar',
        default: '',
    })
    cnaWebSite?: string;

    @Field()
    @Column({
        type: 'varchar',
        default: '',
    })
    @IsEmail()
    cnaEmail: string;

    @Field()
    @Column({
        type: 'varchar',
        default: '',
    })
    cnaGPGKey?: string;

    @CreateDateColumn()
    createdAt: Date;

    @UpdateDateColumn()
    updatedDate: Date;

    @Field(() => [CommonVulnerabilitiesExposures])
    @OneToMany(type => CommonVulnerabilitiesExposures, cve => cve.cna, {
        cascade: true,
    })
    cves: CommonVulnerabilitiesExposures[];

    @Field(() => Organizations)
    @ManyToOne(type => Organizations, organization => organization.cnas, {
        cascade: true,
    })
    organization: Organizations;
}
