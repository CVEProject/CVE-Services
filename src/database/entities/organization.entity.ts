import { Entity, PrimaryGeneratedColumn, Column, CreateDateColumn, UpdateDateColumn, OneToOne, JoinColumn, OneToMany, BaseEntity } from 'typeorm';
import { CNANumberingAuthority } from './cna.entity';
import { Field, ID, ObjectType } from 'type-graphql';
import { PublicKeys } from './public-key.entity';
import { CommonVulnerabilitiesExposures } from './cve.entity';
import { Admin } from './admin.entity';

export enum OrganizationStatus {
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE',
}

@ObjectType()
@Entity()
export class Organizations extends BaseEntity {
    @Field(() => ID)
    @PrimaryGeneratedColumn('uuid')
    organizationUUID: string;

    @Field()
    @Column({
        type: 'varchar',
        nullable: false,
        unique: true,
    })
    organizationName: string;

    @Field()
    @Column({
        type: 'varchar',
        default: '',
    })
    organizationWebsite?: string;

    @Field()
    @Column({
        type: 'enum',
        enum: OrganizationStatus,
        default: OrganizationStatus.ACTIVE,
    })
    organizationStatus?: OrganizationStatus;

    @CreateDateColumn()
    createdAt: Date;

    @UpdateDateColumn()
    updatedDate: Date;

    @Field(() => [CNANumberingAuthority])
    @OneToMany(type => CNANumberingAuthority, cna => cna.organization)
    cnas?: CNANumberingAuthority[];

    @Field(() => PublicKeys)
    @OneToOne(type => PublicKeys, publicKey => publicKey.publicKey, {
        cascade: true,
    })
    @JoinColumn()
    publicKey: PublicKeys;

    @Field(() => [CommonVulnerabilitiesExposures])
    @OneToMany(type => CommonVulnerabilitiesExposures, cve => cve.cna)
    cves?: CommonVulnerabilitiesExposures[];

    @Field(() => Admin)
    @OneToOne(type => Admin, admin => admin.organization, {
        cascade: true,
    })
    admin?: Admin;
}
