import { Resolver, Mutation, Arg } from 'type-graphql';
import { getRepository } from 'typeorm';
import { CreateCVEInput } from '../inputs/cna.input';
import { CommonVulnerabilitiesExposures } from '../../entities/cve.entity';
import * as UUID from 'uuidv4';
import { Organizations, OrganizationStatus } from '../../entities/organization.entity';
@Resolver()
export class CNAResolver {
    //TODO: What is the Payload?

    //IDS created for when a CVE is 'submited'. Payload would get switched out by whatever fields
    //needed to create a CVE
    @Mutation(() => Boolean)
    async submitCVE(@Arg('data')
    {
        cnaUUID,
        payload,
        signature,
    }: CreateCVEInput): Promise<CommonVulnerabilitiesExposures> {
        const year = new Date().getFullYear().toString();
        const cveRepo = getRepository(CommonVulnerabilitiesExposures);
        const orgRepo = getRepository(Organizations);
        const organization = await orgRepo.findOne({
            relations: ['cnas'],
            where: { organizationStatus: OrganizationStatus.ACTIVE, cnas: [{ cnaUUID: cnaUUID }] },
        });
        let cve = new CommonVulnerabilitiesExposures();
        cve.organization = organization;
        cve.cna = organization.cnas[0];
        cve.cveID = 'CVE-' + year + '-' + UUID().substring(0, 8);
        return await cveRepo.save(cve);
    }
}
