import { Resolver, Query, Mutation, Arg, Authorized } from 'type-graphql';
import { getRepository } from 'typeorm';
import { Organizations } from '../../entities/organization.entity';
import { OrganizationInput, CreateCNAInput, GetCNAInput } from '../inputs/org.input';
import { PublicKeys } from '../../entities/public-key.entity';
import { Admin } from '../../entities/admin.entity';
import { CNANumberingAuthority } from '../../entities/cna.entity';
import { CNAType } from '../../entities/cna.entity';

@Resolver(Organizations)
export class OrganizationResolver {
    @Query(returns => [Organizations])
    async getOrganizations(): Promise<Organizations[]> {
        const organizationRepo = getRepository(Organizations);
        const organizations = await organizationRepo.createQueryBuilder('organizations').getMany();
        return organizations;
    }

    @Authorized()
    @Query(returns => [CNANumberingAuthority])
    async listOrganizationCNAS(@Arg('data') { organizationUUID, signature }: GetCNAInput): Promise<CNANumberingAuthority[]> {
        const organizationRepo = getRepository(Organizations);
        const organization = await organizationRepo.findOne({ relations: ['cnas', 'publicKey'], where: { organizationUUID } });
        return organization.cnas;
    }

    @Mutation(() => Organizations)
    async addOrganization(@Arg('data')
    {
        organizationName,
        organizationWebsite,
        publicKey,
    }: OrganizationInput): Promise<Organizations> {
        const count = await Organizations.getRepository()
            .createQueryBuilder('organizations')
            .select('DISTINCT(`organizationUUID`)')
            .getCount();
        const pubKey = new PublicKeys();
        if (!count) {
            pubKey.publicKey = publicKey.publicKey;
            publicKey = pubKey;
            const organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            let admin = await Admin.create({ organization }).save();
            return admin.organization;
        } else {
            pubKey.publicKey = publicKey.publicKey;
            publicKey = pubKey;
            const organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            return organization;
        }
    }

    @Authorized()
    @Mutation(() => String)
    async addCNA(@Arg('data')
    {
        organizationUUID,
        signature,
        cnaDescription,
        cnaEmail,
        cnaName,
        cnaWebSite,
    }: CreateCNAInput): Promise<String> {
        const organizationRepo = getRepository(Organizations);
        const organization = await organizationRepo.findOne({ relations: ['publicKey', 'cnas', 'admin'], where: { organizationUUID } });
        const cna = new CNANumberingAuthority();
        cna.organization = organization;
        cna.cnaEmail = cnaEmail;
        cna.cnaDescription = cnaDescription;
        cna.cnaWebSite = cnaWebSite;
        cna.cnaName = cnaName;
        const cnaRepo = getRepository(CNANumberingAuthority);
        if (organization.cnas.length > 0) {
            await cnaRepo.save(cna);
            return 'CNA Created';
        } else {
            //First CNA of Organisation is Admin
            if (organization.admin.adminUUID) {
                cna.cnaType = CNAType.GOD_MODE;
                await cnaRepo.save(cna);
                return 'CNA Created with Godlike Powers';
            } else {
                cna.cnaType = CNAType.ORG_ADMIN;
                await cnaRepo.save(cna);
                return 'Admin CNA Created';
            }
        }
    }
}
