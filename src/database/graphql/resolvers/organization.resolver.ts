import { Resolver, Query, Mutation, Arg, Ctx, Root, Authorized } from 'type-graphql';
import * as NodeRSA from 'node-rsa';
import { getRepository } from 'typeorm';
import { Organizations } from '../../entities/organization.entity';
import { OrganizationInput, CreateCNAInput } from '../inputs/org.input';
import { PublicKeys } from '../../entities/public-key.entity';
import { Admin } from '../../entities/admin.entity';
import { CNANumberingAuthority } from '../../entities/cna.entity';
const parseJson = require('parse-json');

interface cnaPayload {
    cnaName: string;
    cnaDescription: string;
    cnaType?: string;
    cnaWebSite: string;
    cnaEmail: string;
}
@Resolver(Organizations)
export class OrganizationResolver {
    @Query(returns => [Organizations])
    async getOrganizations(): Promise<Organizations[]> {
        let organizationRepo = getRepository(Organizations);
        let organizations = await organizationRepo
            .createQueryBuilder('organizations')
            .select(['organizations.organizationName', 'organizations.organizationWebsite', 'organizations.organizationUUID'])
            .getMany();
        return organizations;
    }

    @Mutation(() => Organizations)
    async addOrganization(@Arg('data')
    {
        organizationName,
        organizationWebsite,
        key,
    }: OrganizationInput): Promise<Organizations> {
        const count = await Organizations.getRepository()
            .createQueryBuilder('organizations')
            .select('DISTINCT(`organizationUUID`)')
            .getCount();
        let publicKey = new PublicKeys();
        if (!count) {
            publicKey.publicKey = key.publicKey;
            let organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            let admin = await Admin.create({ organization }).save();
            return admin.organization;
        } else {
            publicKey.publicKey = key.publicKey;
            let organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            return organization;
        }
    }

    @Mutation(() => CNANumberingAuthority)
    async addCNA(@Arg('data')
    {
        organizationUUID,
        payload,
        signature,
    }: CreateCNAInput): Promise<CNANumberingAuthority> {
        let organizationRepo = getRepository(Organizations);
        let organizaation = await organizationRepo.findOne({ relations: ['publicKey'], where: { organizationUUID } });

        let serverNodeRsa = new NodeRSA(organizaation.publicKey.publicKey);
        serverNodeRsa.setOptions({ signingScheme: process.env.RSASigningSchema });
        let signatureVerification = serverNodeRsa.verify(payload, signature, null, 'hex') as boolean;

        if (signatureVerification) {
            let cna = new CNANumberingAuthority();
            let newCna = parseJson(payload) as cnaPayload;
            cna.organization = organizaation;
            cna.cnaEmail = newCna.cnaEmail;
            cna.cnaDescription = newCna.cnaDescription;
            cna.cnaWebSite = newCna.cnaWebSite;
            cna.cnaName = newCna.cnaName;
            let cnaRepo = getRepository(CNANumberingAuthority);
            return await cnaRepo.save(cna);
        } else {
            return null;
        }
    }
}
