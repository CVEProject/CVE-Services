import { Resolver, Query, Mutation, Arg } from 'type-graphql';
import { getRepository } from 'typeorm';
import { Organizations } from '../../entities/organization.entity';
import { OrganizationInput, CreateCNAInput } from '../inputs/org.input';
import { PublicKeys } from '../../entities/public-key.entity';
import { Admin } from '../../entities/admin.entity';
import { CNANumberingAuthority } from '../../entities/cna.entity';
import { CNAType } from '../../entities/cna.entity';
import { verifySignature } from '../../../routes/controllers/utils/rsa';
const parseJson = require('parse-json');

interface cnaPayload {
    cnaName: string;
    cnaDescription: string;
    cnaType?: string;
    cnaWebSite: string;
    cnaEmail: string;
}
@Resolver(Organizations)
export class OrganizationResolver {
    @Query(returns => [Organizations])
    async getOrganizations(): Promise<Organizations[]> {
        const organizationRepo = getRepository(Organizations);
        const organizations = await organizationRepo
            .createQueryBuilder('organizations')
            .select(['organizations.organizationName', 'organizations.organizationWebsite', 'organizations.organizationUUID'])
            .getMany();
        return organizations;
    }

    @Mutation(() => Organizations)
    async addOrganization(@Arg('data')
    {
        organizationName,
        organizationWebsite,
        key,
    }: OrganizationInput): Promise<Organizations> {
        const count = await Organizations.getRepository()
            .createQueryBuilder('organizations')
            .select('DISTINCT(`organizationUUID`)')
            .getCount();
        const publicKey = new PublicKeys();
        if (!count) {
            publicKey.publicKey = key.publicKey;
            const organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            let admin = await Admin.create({ organization }).save();
            return admin.organization;
        } else {
            publicKey.publicKey = key.publicKey;
            const organization = await Organizations.create({
                organizationName,
                organizationWebsite,
                publicKey,
            }).save();
            return organization;
        }
    }

    @Mutation(() => String)
    async addCNA(@Arg('data')
    {
        organizationUUID,
        payload,
        signature,
    }: CreateCNAInput): Promise<String> {
        const organizationRepo = getRepository(Organizations);
        const organization = await organizationRepo.findOne({ relations: ['publicKey', 'cnas', 'admin'], where: { organizationUUID } });
        const signatureVerification = verifySignature(payload, signature, organization.publicKey.publicKey);
        if (signatureVerification) {
            const cna = new CNANumberingAuthority();
            const newCna = parseJson(payload) as cnaPayload;
            cna.organization = organization;
            cna.cnaEmail = newCna.cnaEmail;
            cna.cnaDescription = newCna.cnaDescription;
            cna.cnaWebSite = newCna.cnaWebSite;
            cna.cnaName = newCna.cnaName;
            const cnaRepo = getRepository(CNANumberingAuthority);
            if (organization.cnas.length > 0) {
                await cnaRepo.save(cna);
                return 'CNA Created';
            } else {
                //First CNA of Organisation is Admin
                if (organization.admin.adminUUID) {
                    cna.cnaType = CNAType.GOD_MODE;
                    return 'CNA Created with Godlike Powers';
                } else {
                    cna.cnaType = CNAType.ORG_ADMIN;
                    await cnaRepo.save(cna);
                    return 'Admin CNA Created';
                }
            }
        } else {
            return 'Error';
        }
    }
}
