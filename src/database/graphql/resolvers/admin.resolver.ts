import { Resolver, Query, Mutation, Arg, Ctx, Root, Authorized } from 'type-graphql';
import * as NodeRSA from 'node-rsa';
import { getRepository } from 'typeorm';
import { Organizations } from '../../entities/organization.entity';
import { OrganizationInput, CreateCNAInput } from '../inputs/org.input';
import { PublicKeys } from '../../entities/public-key.entity';
import { Admin } from '../../entities/admin.entity';
import { CNANumberingAuthority } from '../../entities/cna.entity';
import { AdminInput } from '../inputs/admin.input';

enum OrganizationStatus {
    ACTIVE = 'ACTIVE',
    INACTIVE = 'INACTIVE',
}

@Resolver()
export class AdminResolver {
    @Authorized()
    @Mutation(() => Organizations)
    async changeOrgStatus(@Arg('data')
    {
        organizationUUID,
        adminOrganizationUUID,
        payload,
        signature,
    }: AdminInput): Promise<Organizations> {
        let organizationRepo = getRepository(Organizations);
        let org = await organizationRepo.findOne({ where: { organizationUUID } });
        org.organizationStatus = payload as OrganizationStatus;
        org = await organizationRepo.save(org);
        return org;
    }
}
