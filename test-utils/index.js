const express = require('express')
const config = require('config')
const mongoose = require('mongoose')
const app = express()
const orgController = require('../src/controller/org.controller/org.controller')
const cveController = require('../src/controller/cve.controller/cve.controller')
const cveIdController = require('../src/controller/cve-id.controller/cve-id.controller')
const mw = require('../src/middleware/middleware')

// Body Parser Middleware
app.use(express.json()) // Allows us to handle raw JSON data
app.use(express.urlencoded({ extended: false })) // Allows us to handle url encoded data
app.use(mw.createCtxAndReqUUID)
app.use(mw.ctxHeaders)

// Make mongoose connection available globally
global.mongoose = mongoose

//* ************API Routes Setup*********** */
//* ********** Middleware Routes ********** */

// validate user
app.route('/api/test/mw/user')
  .post(mw.validateUser, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// secretariat only
app.route('/api/test/mw/secretariat_only')
  .post(mw.onlySecretariat, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// cna only
app.route('/api/test/mw/cna_only')
  .post(mw.onlyCnas, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

// validate json schema 5.0
app.route('/api/test/mw/schema5')
  .post(mw.validateCveJsonSchema, (req, res) => {
    return res.status(200).json({ message: 'Success! You have reached the target endpoint.' })
  })

//* ************* Cve Routes ************ */

// create cve
app.route('/api/test/cve')
  .post(cveController.CVE_SUBMIT)

// update cve
app.route('/api/test/cve/:id')
  .post(cveController.CVE_UPDATE_SINGLE)

//* ************* Org Routes ************ */

// get all cnas
app.route('/api/test/cna')
  .get(orgController.CNA_ALL)

// get a cna
app.route('/api/test/cna/:shortname')
  .get(orgController.CNA_SINGLE)

// create a cna
app.route('/api/test/cna')
  .post(orgController.CNA_CREATE_SINGLE)

// update a cna
app.route('/api/test/cna/:shortname')
  .post(orgController.CNA_UPDATE_SINGLE)

// get cna id quota
app.route('/api/test/cna/:shortname/id_quota')
  .get(orgController.ORG_ID_QUOTA)

// get a user
app.route('/api/test/cna/:shortname/user/:username')
  .get(orgController.USER_SINGLE)

// create a user
app.route('/api/test/cna/:shortname/user')
  .post(orgController.USER_CREATE_SINGLE)

// update a user
app.route('/api/test/cna/:shortname/user/:username')
  .post(orgController.USER_UPDATE_SINGLE)

// reset a user secret
app.route('/api/test/cna/:shortname/user/:username/reset_secret')
  .post(orgController.USER_RESET_SECRET)

//* ************ Cve-Id Routes *********** */

// get a cve id specs from a cve document
app.route('/api/test/cve-id/:id')
  .get(cveIdController.CVEID_GET_SINGLE)

// get a filtered cve document
app.route('/api/test/cve-id')
  .get(cveIdController.CVEID_GET_FILTER)

// modify a cve (cna reassigning or cve id STATE change)
app.route('/api/test/cve-id/:id')
  .post(cveIdController.CVEID_STATE_REASIGN_SINGLE)

// reserve cve id(s)
app.route('/api/test/cve-id')
  .post(cveIdController.CVEID_RESERVE)

// create a cve id range document
app.route('/api/test/cve-id-range/:year')
  .post(cveIdController.CVEID_RANGE_CREATE)

//* ********API Routes Setup END*********** */

// construct MongoDB connection string
// assumes that host, port, database are always defined in default config, but
// that username and password may not be
// TODO: can we not repeat `src/index.js` and `test-utils/index.js`
const appEnv = process.env.NODE_ENV
let dbUser, dbPassword

if (process.env.MONGO_USER && process.env.MONGO_PASSWORD) {
  dbUser = process.env.MONGO_USER
  dbPassword = process.env.MONGO_PASSWORD
} else {
  dbUser = config.has(`${appEnv}.username`) ? config.get(`${appEnv}.username`) : false
  dbPassword = config.has(`${appEnv}.password`) ? config.get(`${appEnv}.password`) : false
}

const dbHost = process.env.MONGO_HOST ? process.env.MONGO_HOST : config.get(`${appEnv}.host`)
const dbPort = process.env.MONGO_PORT ? process.env.MONGO_PORT : config.get(`${appEnv}.port`)
const dbName = config.get(`${appEnv}.database`)
const dbLoginPrepend = (dbUser && dbPassword) ? `${dbUser}:${dbPassword}@` : ''
const dbConnectionStr = `mongodb://${dbLoginPrepend}${dbHost}:${dbPort}/${dbName}`

// Connect to MongoDB database
mongoose.connect(dbConnectionStr, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
  useFindAndModify: false
})

// database connection
const db = mongoose.connection

db.on('error', () => {
  console.error.bind(console, 'Connection Error: Something went wrong!')
})

db.once('open', () => {
  console.log(`Successfully connected to database ${dbName} at ${dbHost}:${dbPort}`)
  const port = config.get('port')
  app.listen(port)
})

module.exports = app
