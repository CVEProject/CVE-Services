const chai = require('chai')
const sinon = require('sinon')
const { faker } = require('@faker-js/faker')
const _ = require('lodash')
const expect = chai.expect
const cveIdPublished5 = 'CVE-2017-4024'
const cveIdController = require('../../../src/controller/cve-id.controller/cve-id.controller.js')
const errors = require('../../../src/controller/cve-id.controller/error.js')
const error = new errors.CveIdControllerError()

const OrgRepository = require('../../../src/repositories/orgRepository.js')
const CveIdRepository = require('../../../src/repositories/cveIdRepository.js')
const UserRepository = require('../../../src/repositories/userRepository.js')

const orgUUID = faker.datatype.uuid()

const stubOrg = {
  short_name: 'testOrg',
  name: 'test_org',
  UUID: orgUUID,
  authority: {
    active_roles: [
      'CNA',
      'Secretariat'
    ]
  }
}

const stubUser = {
  username: 'testUser',
  org_UUID: orgUUID,
  UUID: faker.datatype.uuid()
}

const stubCveId = {
  requested_by: {
    cna: 'mitre',
    user: 'test_secretariat_0@mitre.org'
  },
  cve_id: 'CVE-2017-4024',
  cve_year: '2017',
  state: 'PUBLISHED',
  owning_cna: 'mitre',
  reserved: '2023-05-17T16:57:35.698Z'
}

const aggPagResp = {
  itemsList: [stubCveId],
  itemCount: 1,
  itemsPerPage: 1000,
  currentPage: 1,
  pageCount: 1,
  pagingCounter: 1,
  hasPrevPage: false,
  hasNextPage: false,
  prevPage: null,
  nextPage: null
}

const builtQuery = {
  cve_year: 1999,
  state: 'RESERVED',
  'time.modified': {
    $gt: '2022-01-07T00:00:00.000Z',
    $lt: '2023-01-07T00:00:00.000Z'
  }
}
describe('Testing getFilteredCveId function', () => {
  let status, json, res, next, getOrgRepository,
    orgRepo, getCveIdRepository, cveIdRepo,
    getUserRepository, userRepo, req

  // Stub out functions called in insertAdp and reset them for each test
  beforeEach(() => {
    status = sinon.stub()
    json = sinon.spy()
    res = { json, status }
    next = sinon.spy()
    status.returns(res)
    orgRepo = new OrgRepository()
    getOrgRepository = sinon.stub()
    getOrgRepository.returns(orgRepo)

    userRepo = new UserRepository()
    getUserRepository = sinon.stub()
    getUserRepository.returns(userRepo)

    cveIdRepo = new CveIdRepository()
    getCveIdRepository = sinon.stub()
    getCveIdRepository.returns(cveIdRepo)

    sinon.stub(cveIdRepo, 'findOneByCveId').returns(stubCveId)
    sinon.stub(cveIdRepo, 'aggregatePaginate').returns(aggPagResp)

    sinon.stub(orgRepo, 'getOrgUUID').returns(stubOrg.UUID)
    sinon.stub(orgRepo, 'isSecretariat').returns(true)
    sinon.stub(orgRepo, 'isBulkDownload').returns(false)
    sinon.stub(orgRepo, 'getAllOrgs').returns([stubOrg])

    sinon.stub(userRepo, 'getUserUUID').returns(stubUser.UUID)
    sinon.stub(userRepo, 'getAllUsers').returns([stubUser])

    sinon.spy(cveIdController, 'CVEID_GET_FILTER')
    req = {
      ctx: {
        org: stubOrg.short_name,
        uuid: stubOrg.UUID,
        query: {},
        repositories: {
          getOrgRepository,
          getUserRepository,
          getCveIdRepository
        }
      }
    }
  })
  it('Should have correctly built query', async () => {
    req.ctx.query = {
      cve_id_year: 1999,
      'time_modified.gt': '2022-01-07T00:00:00.000Z',
      'time_modified.lt': '2023-01-07T00:00:00.000Z',
      state: 'RESERVED'
    }
    await cveIdController.CVEID_GET_FILTER(req, res, next)
    expect(cveIdRepo.aggregatePaginate.calledOnce)
    expect(cveIdRepo.aggregatePaginate.args[0][0][0].$match).to.deep.equal(builtQuery)
  })

//   it.only('Should correctly build a map of orgs and users', async () => {
//     req.ctx.query = {
//       cve_id_year: 1999,
//       'time_modified.gt': '2022-01-07T00:00:00.000Z',
//       'time_modified.lt': '2023-01-07T00:00:00.000Z',
//       state: 'RESERVED'
//     }
//     await cveIdController.CVEID_GET_FILTER(req, res, next)
//     expect(cveIdRepo.aggregatePaginate.calledOnce)
//     expect(cveIdRepo.aggregatePaginate.args[0][0][0].$match).to.deep.equal(builtQuery)
//   })
})
