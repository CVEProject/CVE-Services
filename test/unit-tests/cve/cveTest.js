// const server = require('../../../test-utils/index')
// const chai = require('chai')
// const expect = chai.expect
// chai.use(require('chai-http'))
// const headers = require('./mockObjects.cve').headers
// const existentUser = require('./mockObjects.cve').existentUser
// const existentOrgNotSecretariat = require('./mockObjects.cve').existentOrgNotSecretariat
// const Cve = require('../../../src/model/cve')
// const User = require('../../../src/model/user')
// const Org = require('../../../src/model/org')
// const nonExistentCveId = 'CVE-2017-35437'
// const cveId = 'CVE-2017-4024'
// const cvePass = require('../../schemas/5.0/' + cveId + '.json')

// describe('Test Cve Controller', () => {
//   before(async () => {
//     await Cve.findOneAndRemove().byCveId(cveId)
//     await Cve.findOneAndRemove().byCveId(nonExistentCveId)

//     await User.findOneAndUpdate()
//       .byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
//       .updateOne(existentUser)
//       .setOptions({ upsert: true })

//     await Org.findOneAndUpdate()
//       .byShortName(existentOrgNotSecretariat.short_name)
//       .updateOne(existentOrgNotSecretariat)
//       .setOptions({ upsert: true })
//   })

//   context('Creating a cve', () => {
//     it('Cve is created', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/cve')
//         .set(headers)
//         .send(cvePass)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal(cveId + ' has been created.')
//           done()
//         })
//     })

//     it('Cve is not created because it already exists', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/cve')
//         .set(headers)
//         .send(cvePass)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal(cveId + ' already exists.')
//           done()
//         })
//     })
//   })

//   context('Updating a cve', () => {
//     it('Cve id does not match', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/cve/' + nonExistentCveId)
//         .set(headers)
//         .send(cvePass)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert the mocked response
//           expect(res).to.have.status(400)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal(nonExistentCveId + ' parameter does not match ' + cveId + ' in the JSON body.')
//           done()
//         })
//     })

//     it('Cve is updated', (done) => {
//       // perform the request to the api
//       chai.request(server)
//         .post('/api/test/cve/' + cveId)
//         .set(headers)
//         .send(cvePass)
//         .end((err, res) => {
//           if (err) {
//             done(err)
//           }

//           // assert expected response
//           expect(res).to.have.status(200)
//           expect(res).to.have.property('body').and.to.be.a('object')
//           expect(res.body).to.have.property('message').and.to.be.a('string')
//           expect(res.body.message).to.equal(cveId + ' has been updated.')
//           done()
//         })
//     })

//     it('Cve is not updated because it does not exists', (done) => {
//       Cve.findOneAndRemove()
//         .byCveId(cveId)
//         .exec((err) => {
//           if (err) {
//             done(err)
//           }

//           // perform the request to the api
//           chai.request(server)
//             .post('/api/test/cve/' + cveId)
//             .set(headers)
//             .send(cvePass)
//             .end((err, res) => {
//               if (err) {
//                 done(err)
//               }

//               // assert expected response
//               expect(res).to.have.status(404)
//               expect(res).to.have.property('body').and.to.be.a('object')
//               expect(res.body).to.have.property('message').and.to.be.a('string')
//               expect(res.body.message).to.equal(cveId + ' does not exist.')
//               done()
//             })
//         })
//     })
//   })

//   after(async () => {
//     await Cve.findOneAndRemove().byCveId(cveId)
//     await Cve.findOneAndRemove().byCveId(nonExistentCveId)
//     await User.findOneAndRemove().byUserNameAndCnaShortName(existentUser.username, existentUser.cna_short_name)
//     await Org.findOneAndRemove().byShortName(existentOrgNotSecretariat.short_name)
//   })
// })
