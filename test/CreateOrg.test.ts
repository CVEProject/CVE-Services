import * as faker from 'faker';
import { Connection } from 'typeorm';
import { gCall } from './test-utils/gCall';
import { testConn } from './test-utils/testConn';
import { Organizations } from '../src/database/entities/organization.entity';
let conn: Connection;
beforeAll(async () => {
    conn = await testConn();
});
afterAll(async () => {
    await conn.close();
});

const addOrganizationMutation = `
mutation addOrganization($data: OrganizationInput!) {
  addOrganization(
    data: $data
  ) {
    organizationName
  }
}
`;

describe('Add New Organization', () => {
    it.only('create new organization', async () => {
        const organization = {
            organizationName: faker.company.companyName(),
            organizationWebsite: faker.internet.url(),
            publicKey: {
                publicKey: faker.internet.password(),
            },
        };

        const response = await gCall({
            source: addOrganizationMutation,
            variableValues: {
                data: organization,
            },
        });

        if (response.errors) {
            console.log(response.errors[0].originalError);
        }
        expect(response).toMatchObject({
            data: {
                addOrganization: {
                    organizationName: organization.organizationName,
                },
            },
        });

        const dbOrganization = await Organizations.findOne({ where: { organizationName: organization.organizationName } });
        expect(dbOrganization).toBeDefined();
        expect(dbOrganization.organizationUUID).toBeDefined();
        expect(dbOrganization.organizationName).toBe(organization.organizationName);
        expect(dbOrganization.organizationWebsite).toBe(organization.organizationWebsite);
    });
});
