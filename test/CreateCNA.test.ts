import * as faker from 'faker';
import { Connection } from 'typeorm';
import { gCall } from './test-utils/gCall';
import { testConn } from './test-utils/testConn';
import { Organizations } from '../src/database/entities/organization.entity';
import { CNANumberingAuthority } from '../src/database/entities/cna.entity';
import { ORG_UUID, SIGNATURE, PUBLIC_KEY } from './test-utils/constants';
import { PublicKeys } from '../src/database/entities/public-key.entity';
import { Admin } from '../src/database/entities/admin.entity';
let conn: Connection;
beforeAll(async () => {
    conn = await testConn();
});
afterAll(async () => {
    await conn.close();
});

const addCnaMutation = `
mutation addCNA($data: CreateCNAInput!) {
    addCNA(
    data: $data
  )
}
`;

const listCnaQuery = `
query listOrganizationCNAS($data: GetCNAInput!) {
    listOrganizationCNAS(
    data: $data
  ){
    cnaUUID 
  }
}
`;
describe('Add CNA to Organization', () => {
    it.only('create new CNA', async () => {
        let publicKey = new PublicKeys();
        publicKey.publicKey = PUBLIC_KEY;
        const organization = await Organizations.create({
            organizationUUID: ORG_UUID,
            organizationName: faker.company.companyName(),
            organizationWebsite: faker.internet.url(),
            publicKey: publicKey,
        }).save();
        let admin = await Admin.create({ organization }).save();

        const cna = {
            cnaName: faker.name.firstName(),
            cnaEmail: faker.internet.email(),
            organizationUUID: ORG_UUID,
            signature: SIGNATURE,
        };

        const response = await gCall({
            source: addCnaMutation,
            variableValues: {
                data: cna,
            },
        });

        if (response.errors) {
            console.log(response.errors[0].originalError);
        }

        const dbCNA = await CNANumberingAuthority.findOne({ relations: ['organization'], where: { cnaEmail: cna.cnaEmail } });
        expect(dbCNA).toBeDefined();
        expect(dbCNA.cnaName).toBe(cna.cnaName);
        expect(dbCNA.cnaEmail).toBe(cna.cnaEmail);
    });
});

describe('List All Org CNA', () => {
    it.only('list cnas', async () => {
        const query = {
            organizationUUID: ORG_UUID,
            signature: SIGNATURE,
        };

        const response = await gCall({
            source: listCnaQuery,
            variableValues: {
                data: query,
            },
        });

        if (response.errors) {
            console.log(response.errors[0].originalError);
        }
        expect(response.data.listOrganizationCNAS.length).toBeGreaterThanOrEqual(1);
    });
});
