/* eslint-disable no-unused-expressions */

const chai = require('chai')
chai.use(require('chai-http'))

const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')
const _ = require('lodash')

const adpContainer = require('../../schemas/5.0/adpContainerExample.json').adpContainer

const requestLength = 1
const adpLength = 1

describe('Testing ADP insert Endpoint', () => {
  let cveId, adpContainerCopy
  beforeEach(async () => {
    await chai.request(app)
      .post(`/api/cve-id?amount=${requestLength}&cve_year=2023&short_name=win_5&batch_type=non-sequential`)
      .set(constants.nonSecretariatUserHeaders)
      .then((res, err) => {
        expect(err).to.be.undefined
        cveId = res.body.cve_ids[0].cve_id
      })

    // Request the CVE
    await chai.request(app)
      .post(`/api/cve/${cveId}/cna`)
      .set(constants.nonSecretariatUserHeaders)
      .send(constants.testCve)
      .then((res, err) => {
        expect(err).to.be.undefined
        expect(res).to.have.status(200)
        expect(res).to.have.property('body').and.to.be.a('object')
        expect(res.body).to.have.property('created').and.to.be.a('object')
        expect(res.body.created).to.have.nested.property('cveMetadata.cveId')
        expect(res.body.created).to.have.nested.property('cveMetadata.state')
      })

    adpContainerCopy = _.cloneDeep(adpContainer)
  })
  context('Positive Tests', () => {
    // First, request a CVE ID
    it.only('Reserve ADP ', async () => {
      await chai.request(app)
        .put(`/api/cve/${cveId}/adp`)
        .set(constants.nonSecretariatUserHeaders)
        .send(constants.testAdp)
        .then((res, err) => {
          expect(err).to.be.undefined
          const resMessage = cveId + ' record had new ADP container ' + adpLength + ' successfully inserted'
          expect(res.body.message).to.include(resMessage)
          expect(res.body.updated.containers.adp).to.have.length(adpLength)

          adpContainerCopy.providerMetadata = res.body.updated.containers.adp[0].providerMetadata
          expect(res.body.updated.containers.adp[0]).to.deep.equal(adpContainerCopy)

          expect(res).to.have.status(200)
        })
    })
  })
})
