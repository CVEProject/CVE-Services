/* eslint-disable no-unused-expressions */

const chai = require('chai')
chai.use(require('chai-http'))

const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')

const requestLength = 1

describe('Testing Reserve CVE Endpoint', () => {
  context('Positive Tests', () => {
    let cveId = null
    // First, request a CVE ID
    it('Testing Reservation of CVE ', async () => {
      await chai.request(app)
        .post(`/api/cve-id?amount=${requestLength}&cve_year=2023&short_name=win_5&batch_type=non-sequential`)
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(err).to.be.undefined
          cveId = res.body.cve_ids[0].cve_id
        })

      // Request the CVE
      await chai.request(app)
        .post(`/api/cve/${cveId}/cna`)
        .set(constants.nonSecretariatUserHeaders)
        .send(constants.testCve)
        .then((res, err) => {
          expect(err).to.be.undefined
          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.nested.property('cveMetadata.cveId')
          expect(res.body.created).to.have.nested.property('cveMetadata.state')
        })
    })
  })
})
