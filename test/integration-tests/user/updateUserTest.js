/* eslint-disable no-unused-expressions */

const chai = require('chai')
chai.use(require('chai-http'))

const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')

describe('Testing Edit user endpoint', () => {
  context('User edit tests', () => {
    it('Should return 200 when only name changes are done', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?name.first=NewName')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(err).to.be.undefined
          expect(res).to.have.status(200)
        })
    })
    it('Should return an error when admin is required', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?new_username=NewUsername')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(err).to.be.undefined
          expect(res).to.have.status(403)
          expect(res.body.error).to.contain('NOT_ORG_ADMIN_OR_SECRETARIAT_UPDATE')
        })
    })
    it('Should not allow a first name of more than 100 characters', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?name.first=1:1234567,2:1234567,3:1234567,4:1234567,5:1234567,6:1234567,7:1234567,8:1234567,9:1234567,10:1234567,11:1234567')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(res).to.have.status(400)
          expect(res.body.error).to.contain('BAD_INPUT')
        })
    })
    it('Should not allow a middle name of more than 100 characters', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?name.middle=1:1234567,2:1234567,3:1234567,4:1234567,5:1234567,6:1234567,7:1234567,8:1234567,9:1234567,10:1234567,11:1234567')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(res).to.have.status(400)
          expect(res.body.error).to.contain('BAD_INPUT')
        })
    })
    it('Should not allow a last name of more than 100 characters', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?name.last=1:1234567,2:1234567,3:1234567,4:1234567,5:1234567,6:1234567,7:1234567,8:1234567,9:1234567,10:1234567,11:1234567')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(res).to.have.status(400)
          expect(res.body.error).to.contain('BAD_INPUT')
        })
    })
    it('Should not allow a suffix of more than 100 characters', async () => {
      await chai.request(app)
        .put('/api/org/win_5/user/jasminesmith@win_5.com?name.suffix=1:1234567,2:1234567,3:1234567,4:1234567,5:1234567,6:1234567,7:1234567,8:1234567,9:1234567,10:1234567,11:1234567')
        .set(constants.nonSecretariatUserHeaders)
        .then((res, err) => {
          expect(res).to.have.status(400)
          expect(res.body.error).to.contain('BAD_INPUT')
        })
    })
  })
})
