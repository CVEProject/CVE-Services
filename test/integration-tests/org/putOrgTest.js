const chai = require('chai')
chai.use(require('chai-http'))
const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')

const params = { name: 'Test Organization', id_quota: 100 }
const secretariat_params = { name: 'MITRE Corporation', id_quota: 100000 }
const cna_params = { name: 'Adams, Nielsen and Hensley', id_quota: 1309 }

describe('Testing org put endpoint', () => {
    context('Positive Tests', () => {
        it('Allows update made by a secretariat to itself', async () => {
            await chai.request(app)
            .put('/api/org/mitre')
            .set({ ...constants.headers })
            .query(params)
            .send()
            .then((res, err) => {
                expect(res).to.have.status(200)
                expect(res.body.updated.name).to.equal(params.name)
                expect(res.body.updated.policies.id_quota).to.equal(params.id_quota)
                expect(err).to.be.undefined
            })
            await chai.request(app)
            .put(`/api/org/mitre`)
            .set({ ...constants.headers })
            .query(secretariat_params)
            .send()
            .then((res, err) => {
                expect(res).to.have.status(200)
                expect(res.body.updated.name).to.equal(secretariat_params.name)
                expect(res.body.updated.policies.id_quota).to.equal(secretariat_params.id_quota)
                expect(err).to.be.undefined
            })
        })
        it('Allows update made by a secretariat to another org', async () => {
            await chai.request(app)
            .put('/api/org/win_5')
            .set({ ...constants.headers })
            .query(params)
            .send()
            .then((res, err) => {
                expect(res).to.have.status(200)
                expect(res.body.updated.name).to.equal(params.name)
                expect(res.body.updated.policies.id_quota).to.equal(params.id_quota)
                expect(err).to.be.undefined
            })
            await chai.request(app)
            .put('/api/org/win_5')
            .set({ ...constants.headers })
            .query(cna_params)
            .send()
            .then((res, err) => {
                expect(res).to.have.status(200)
                expect(res.body.updated.name).to.equal(cna_params.name)
                expect(res.body.updated.policies.id_quota).to.equal(cna_params.id_quota)
                expect(err).to.be.undefined
            })
        })
        it('Update made by non secretariat org to itself ONLY updates last_active field', async () => {
            let now = Date.now()
            await chai.request(app)
            .put('/api/org/win_5')
            .set({ ...constants.nonSecretariatUserHeaders })
            .query(params)
            .send()
            .then((res, err) => {
                // Assert that that the last_active field was updated under 2 seconds ago
                let last_active = Date.parse(res.body.updated.last_active)
                let diff = Math.abs(now - last_active)
                let within_two_seconds = diff < 2000
                expect(within_two_seconds).to.be.true
                // Assert no other fields were changed
                expect(res).to.have.status(200)
                expect(res.body.updated.name).to.equal(cna_params.name)
                expect(res.body.updated.policies.id_quota).to.equal(cna_params.id_quota)
                expect(err).to.be.undefined
            })
        })
    })
    context('Negative Tests', () => {
        it('Fails update made by a non-secretariat org to a different org', async () => {
            await chai.request(app)
            .put('/api/org/cause_8')
            .set({ ...constants.nonSecretariatUserHeaders })
            .send()
            .then((res, err) => {
                expect(res).to.have.status(401)
                expect(err).to.be.undefined
            })
        })
        it('Fails update made by a non-secretariat org to a secretariat', async () => {
            await chai.request(app)
            .put('/api/org/mitre')
            .set({ ...constants.nonSecretariatUserHeaders })
            .send()
            .then((res, err) => {
                expect(res).to.have.status(401)
                expect(err).to.be.undefined
            })
        })
    })
})