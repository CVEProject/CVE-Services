/* eslint-disable no-unused-expressions */
const chai = require('chai')
chai.use(require('chai-http'))
const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')

const params = { name: 'Test Organization', id_quota: 100 }
const secretariatParams = { name: 'MITRE Corporation', id_quota: 100000 }
const cnaParams = { name: 'Adams, Nielsen and Hensley', id_quota: 1309 }

describe('Testing org put endpoint', () => {
  context('Positive Tests', () => {
    it('Allows update made by a secretariat to itself', async () => {
      await chai.request(app)
        .put('/api/org/mitre')
        .set({ ...constants.headers })
        .query(params)
        .send()
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.name).to.equal(params.name)
          expect(res.body.updated.policies.id_quota).to.equal(params.id_quota)
          expect(err).to.be.undefined
        })
      await chai.request(app)
        .put('/api/org/mitre')
        .set({ ...constants.headers })
        .query(secretariatParams)
        .send()
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.name).to.equal(secretariatParams.name)
          expect(res.body.updated.policies.id_quota).to.equal(secretariatParams.id_quota)
          expect(err).to.be.undefined
        })
    })
    it('Allows update made by a secretariat to another org', async () => {
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.headers })
        .query(params)
        .send()
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.name).to.equal(params.name)
          expect(res.body.updated.policies.id_quota).to.equal(params.id_quota)
          expect(err).to.be.undefined
        })
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.headers })
        .query(cnaParams)
        .send()
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.name).to.equal(cnaParams.name)
          expect(res.body.updated.policies.id_quota).to.equal(cnaParams.id_quota)
          expect(err).to.be.undefined
        })
    })
    it('Update made by a secretariat to another org does NOT update last_active field', async () => {
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.headers })
        .query(params)
        .send()
        .then((res, err) => {
          expect(res.body.updated.last_active).to.be.undefined
          expect(res).to.have.status(200)
          expect(err).to.be.undefined
        })
    })
    it('Update made by a secretariat to itself DOES update last_active field', async () => {
      const now = Date.now()
      await chai.request(app)
        .put('/api/org/mitre')
        .set({ ...constants.headers })
        .query(params)
        .send()
        .then((res, err) => {
          expect(res.body.updated.last_active).to.not.be.null
          // Assert that that the last_active field was updated under 2 seconds ago
          const lastActive = Date.parse(res.body.updated.last_active)
          const diff = Math.abs(now - lastActive)
          const withinTwoSeconds = diff < 2000
          expect(withinTwoSeconds).to.be.true
          expect(res).to.have.status(200)
          expect(err).to.be.undefined
        })
    })
    it('Update made by non-secretariat org to itself ONLY updates last_active field', async () => {
      const now = Date.now()
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.nonSecretariatUserHeaders })
        .send()
        .then((res, err) => {
          // Assert that that the last_active field was updated under 2 seconds ago
          const lastActive = Date.parse(res.body.updated.last_active)
          const diff = Math.abs(now - lastActive)
          const withinTwoSeconds = diff < 2000
          expect(withinTwoSeconds).to.be.true
          // Assert no other fields were changed
          expect(res).to.have.status(200)
          expect(res.body.updated.active_roles).to.be.undefined
          expect(res.body.updated.name).to.be.undefined
          expect(res.body.updated.policies).to.be.undefined
          expect(err).to.be.undefined
        })
    })
    it('Request body ignored in update made by non-secretariat org to itself', async () => {
      const requestBody = {
        key1: 'value1',
        key2: 'value2',
        key3: 'value3',
        key4: 'value4',
        key5: 'value5',
        key6: 'value6',
        key7: 'value7',
        key8: 'value8'
      }
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.nonSecretariatUserHeaders })
        .send(requestBody)
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.last_active).to.not.be.null
          expect(res.body.updated.active_roles).to.be.undefined
          expect(res.body.updated.name).to.be.undefined
          expect(res.body.updated.policies).to.be.undefined
          expect(err).to.be.undefined
        })
    })
    it('Request body ignored in update made by secretariat to itself', async () => {
      const requestBody = {
        key1: 'value1',
        key2: 'value2',
        key3: 'value3',
        key4: 'value4',
        key5: 'value5',
        key6: 'value6',
        key7: 'value7',
        key8: 'value8'
      }
      await chai.request(app)
        .put('/api/org/mitre')
        .set({ ...constants.headers })
        .query(params)
        .send(requestBody)
        .then((res, err) => {
          expect(res).to.have.status(200)
          expect(res.body.updated.last_active).to.not.be.null
          expect(res.body.updated.name).to.equal(params.name)
          expect(res.body.updated.policies.id_quota).to.equal(params.id_quota)
          expect(err).to.be.undefined
        })
    })
  })
  context('Negative Tests', () => {
    it('Fails update made by a non-secretariat org to a different org', async () => {
      await chai.request(app)
        .put('/api/org/cause_8')
        .set({ ...constants.nonSecretariatUserHeaders })
        .send()
        .then((res, err) => {
          expect(res).to.have.status(403)
          expect(err).to.be.undefined
          expect(res.body).to.haveOwnProperty('error')
          expect(res.body.error).to.equal('SECRETARIAT_ONLY')
        })
    })
    it('Fails update to fields made by a non-secretariat org to itself', async () => {
      await chai.request(app)
        .put('/api/org/win_5')
        .set({ ...constants.nonSecretariatUserHeaders })
        .query(params)
        .send()
        .then((res, err) => {
          expect(res).to.have.status(403)
          expect(err).to.be.undefined
          expect(res.body).to.haveOwnProperty('error')
          expect(res.body.error).to.equal('SECRETARIAT_ONLY')
        })
    })
    it('Fails update made by a non-secretariat org to a secretariat', async () => {
      await chai.request(app)
        .put('/api/org/mitre')
        .set({ ...constants.nonSecretariatUserHeaders })
        .send()
        .then((res, err) => {
          expect(res).to.have.status(403)
          expect(err).to.be.undefined
          expect(res.body).to.haveOwnProperty('error')
          expect(res.body.error).to.equal('SECRETARIAT_ONLY')
        })
    })
  })
})
