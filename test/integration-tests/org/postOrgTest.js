/* eslint-disable no-unused-expressions */
const chai = require('chai')
chai.use(require('chai-http'))
const expect = chai.expect

const constants = require('../constants.js')
const app = require('../../../src/index.js')

describe('Testing Org post endpoint', () => {
  context('Positive Tests', () => {
    it('Allows creation of org', async () => {
      await chai.request(app)
        .post('/api/org')
        .set({ ...constants.headers })
        .send(constants.testOrg)
        .then((res, err) => {
          expect(err).to.be.undefined
          expect(res).to.have.status(200)

          expect(res.body).to.haveOwnProperty('message')
          expect(res.body.message).to.equal(constants.testOrg.short_name + ' organization was successfully created.')

          expect(res.body).to.haveOwnProperty('created')

          expect(res.body.created).to.haveOwnProperty('name')
          expect(res.body.created.name).to.equal(constants.testOrg.name)

          expect(res.body.created).to.haveOwnProperty('short_name')
          expect(res.body.created.short_name).to.equal(constants.testOrg.short_name)

          expect(res.body.created).to.haveOwnProperty('UUID')

          expect(res.body.created).to.haveOwnProperty('policies')
          expect(res.body.created.policies).to.deep.equal(constants.testOrg.policies)

          expect(res.body.created).to.haveOwnProperty('authority')
          expect(res.body.created.authority).to.deep.equal(constants.testOrg.authority)
        })
    })
  })
  context('Negitive Test', () => {

  })
})
