const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
chai.use(require('chai-as-promised'))
const User = require('../src/model/user')
const middleware = require('../src/middleware/test/middleware.js')
const cvefail = require('./schemas/CVE-2017-4024_fail.json')
const cveRejectPass = require('./schemas/CVE-2017-4024_reject_pass.json')
const cveRejectFail = require('./schemas/CVE-2017-4024_reject_fail.json')
const cveReservedPass = require('./schemas/CVE-2017-4024_reserved_pass.json')
const cveReservedFail = require('./schemas/CVE-2017-4024_reserved_fail.json')
const cvePublicPass = require('./schemas/CVE-2017-4024_public_pass.json')
const cvePublicFail = require('./schemas/CVE-2017-4024_public_fail.json')
const uuidAPIKey = require('uuid-apikey')

describe('Test Validator for JSON Schema 5.0', () => {
  // ------------------- Reject tests  -------------------
  it('Validate a JSON schema REJECT', (done) => {
    const req = {
      body: cveRejectPass,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(200)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('SUCCESSFUL CVE JSON schema validation.')
    done()
  })

  it('Validate a JSON schema REJECT with errors', (done) => {
    const req = {
      body: cveRejectFail,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(400)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('CVE JSON schema validation FAILED.')
    expect(res).to.have.property('errors').to.be.an('array')
    expect(res.errors[0]).to.have.string('requires property "lang"')
    done()
  })

  // ------------------- Reserved tests -------------------
  it('Validate a JSON schema RESERVED', (done) => {
    const req = {
      body: cveReservedPass,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(200)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('SUCCESSFUL CVE JSON schema validation.')
    done()
  })

  it('Validate a JSON schema RESERVED with errors', (done) => {
    const req = {
      body: cveReservedFail,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(400)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('CVE JSON schema validation FAILED.')
    expect(res).to.have.property('errors').to.be.an('array')
    expect(res.errors[0]).to.have.string('CVE_data_meta requires property "ASSIGNER"')
    expect(res.errors[1]).to.have.string('value does not meet minimum length of 1')
    expect(res.errors[2]).to.have.string('requires property "lang"')
    done()
  })

  // ------------------- Public tests -------------------
  it('Validate a JSON schema PUBLIC', (done) => {
    const req = {
      body: cvePublicPass,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(200)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('SUCCESSFUL CVE JSON schema validation.')
    done()
  })

  it('Validate a JSON schema PUBLIC with errors', (done) => {
    const req = {
      body: cvePublicFail,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(400)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('CVE JSON schema validation FAILED.')
    expect(res).to.have.property('errors').to.be.an('array')
    expect(res.errors[0]).to.have.string('CNA.provider_data_meta.ID is not of a type(s) string')
    expect(res.errors[1]).to.have.string('CNA.affected.vendors[0].products[0].versions[0].version_affected is not one of enum values')
    expect(res.errors[2]).to.have.string('CNA.affected.affects_SWID does not meet minimum length of 1')
    expect(res.errors[3]).to.have.string('CNA.problemtypes contains duplicate item')
    expect(res.errors[4]).to.have.string('additionalProperty "additional" exists in instance when not allowed')
    done()
  })

  // ------------------- General tests -------------------
  it('Validate a JSON schema with errors for invalid STATE', (done) => {
    const req = {
      body: cvefail,
      method: 'POST'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(400)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('CVE JSON schema validation FAILED.')
    expect(res).to.have.property('errors').to.be.an('array')
    expect(res.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
    done()
  })

  it('Validate a JSON schema when using GET', (done) => {
    const req = {
      body: cveRejectPass,
      method: 'GET'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(200)
    done()
  })

  it('Validate a JSON schema when using PUT', (done) => {
    const req = {
      body: cveRejectPass,
      method: 'PUT'
    }

    const res = middleware.validateCveJsonSchema(req)
    expect(res).to.have.status(400)
    expect(res).to.have.property('message')
    expect(res.message).to.equal('Bad Request')
    done()
  })
})

describe('Test for user authentication', () => {

  // beforeAll(async (done) => {

  // })

  it('Successful user authentication', async (done) => {
    const headers = {
      'content-type': 'application/json',
      'CVE-API-CNA': 'intel',
      'CVE-API-SUBMITTER': 'ilee',
      'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
    }
    const req = {
      header: headers,
      body: {},
      method: 'POST'
    }

    const res = await User.findOne()
      .byUserNameAndCnaShortName(req.header['CVE-API-SUBMITTER'], req.header['CVE-API-CNA'])
      .exec((err, result) => {
        if (err) {
          return { status: 500, message: 'Internal Server Error' }
        }

        console.log('result: ', result)

        if (!result) {
          return { status: 401, message: 'Unauthorized' }
        }

        if (uuidAPIKey.toAPIKey(result.secret) !== req.header['CVE-API-SECRET']) {
          return { status: 401, message: 'Unauthorized' }
        }

        return { status: 200, message: 'SUCCESSFUL user authentication for ' + req.header['CVE-API-SUBMITTER'] }
      })

    // const res = await Promise.resolve(middleware.validateUser(req))
    // const res = await middleware.validateUser(req)
    // expect(res).to.be.fulfilled.notify(done)
    console.log(res)
    // expect(res).to.eventually.have.status(100)
    // expect(res).to.eventually.have.property('messagey').and.equal('SUCCESSFUL user ! authentication for ' + req.header['CVE-API-SUBMITTER'])
    // expect(res.message).to.eventually.equal('SUCCESSFUL user authentication for ' + req.header['CVE-API-SUBMITTER'])
    // done()
  })

  // it('User authentication without cna header', (done) => {
  //   const headers = {
  //     'content-type': 'application/json',
  //     'CVE-API-CNA': 'intel',
  //     'CVE-API-SUBMITTER': 'ilee',
  //     'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
  //   }
  //   const req = {
  //     headers: headers,
  //     body: {},
  //     method: 'POST'
  //   }
  // })

  // it('User authentication without user header', (done) => {
  //   const headers = {
  //     'content-type': 'application/json',
  //     'CVE-API-CNA': 'intel',
  //     'CVE-API-SUBMITTER': 'ilee',
  //     'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
  //   }
  //   const req = {
  //     headers: headers,
  //     body: {},
  //     method: 'POST'
  //   }
  // })

  // it('User authentication without secret header', (done) => {
  //   const headers = {
  //     'content-type': 'application/json',
  //     'CVE-API-CNA': 'intel',
  //     'CVE-API-SUBMITTER': 'ilee',
  //     'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
  //   }
  //   const req = {
  //     headers: headers,
  //     body: {},
  //     method: 'POST'
  //   }
  // })

  // it('User authentication for user that does not exist', (done) => {
  //   const headers = {
  //     'content-type': 'application/json',
  //     'CVE-API-CNA': 'intel',
  //     'CVE-API-SUBMITTER': 'ilee',
  //     'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
  //   }
  //   const req = {
  //     headers: headers,
  //     body: cvePublicFail,
  //     method: 'POST'
  //   }
  // })

  // it('User authentication for user with incorrect secret', (done) => {
  //   const headers = {
  //     'content-type': 'application/json',
  //     'CVE-API-CNA': 'intel',
  //     'CVE-API-SUBMITTER': 'ilee',
  //     'CVE-API-SECRET': 'V7E3W1J-K1WM1RC-P5DQ02T-T3JCXBM'
  //   }
  //   const req = {
  //     headers: headers,
  //     body: {},
  //     method: 'POST'
  //   }
  // })
})
