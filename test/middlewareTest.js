const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const headers = require('./constants').headers
const cvefail = require('./schemas/CVE-2017-4024_fail.json')
const cveRejectFail = require('./schemas/CVE-2017-4024_reject_fail.json')
const cveReservedFail = require('./schemas/CVE-2017-4024_reserved_fail.json')
const cvePublicFail = require('./schemas/CVE-2017-4024_public_fail.json')

describe('Test for JSON schema 5.0 validation', () => {
  context('Validate json with errors', function () {
    it('Using an invalid STATE', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cvefail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CVE_data_meta.STATE is not one of enum values')
          done()
        })
    })

    it('Using method GET', (done) => {
      chai.request('http://localhost:3000')
        .get('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cveRejectFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          done()
        })
    })

    it('Using method other than POST and GET', (done) => {
      chai.request('http://localhost:3000')
        .put('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cveRejectFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          done()
        })
    })

    it('Json with reject state', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cveRejectFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').to.be.an('array')
          expect(res.body.errors[0]).to.have.string('requires property "lang"')
          done()
        })
    })

    it('Json with reserved state', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cveReservedFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CVE_data_meta requires property "ASSIGNER"')
          expect(res.body.errors[1]).to.have.string('value does not meet minimum length of 1')
          expect(res.body.errors[2]).to.have.string('requires property "lang"')
          done()
        })
    })

    it('Json with public state', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(headers)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('CVE JSON schema validation FAILED.')
          expect(res.body).to.have.property('errors').and.to.be.an('array')
          expect(res.body.errors[0]).to.have.string('CNA.provider_data_meta.ID is not of a type(s) string')
          expect(res.body.errors[1]).to.have.string('CNA.affected.vendors[0].products[0].versions[0].version_affected is not one of enum values')
          expect(res.body.errors[2]).to.have.string('CNA.affected.affects_SWID does not meet minimum length of 1')
          expect(res.body.errors[3]).to.have.string('CNA.problemtypes contains duplicate item')
          expect(res.body.errors[4]).to.have.string('additionalProperty "additional" exists in instance when not allowed')
          done()
        })
    })
  })
})

describe('Test for user authentication', function () {
  context('Validate user', function () {
    it('User not found', function (done) {
      const testHeaders = Object.assign({}, headers)
      testHeaders['CVE-API-CNA'] = 'jpmorgan'
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(testHeaders)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Unauthorized')
          done()
        })
    })

    it('Incorrect secret apikey', function (done) {
      const testHeaders = Object.assign({}, headers)
      testHeaders['CVE-API-SECRET'] = 'wrong secret'
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(testHeaders)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(401)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Unauthorized')
          done()
        })
    })

    it('Cna undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-CNA']
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(testHeaders)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-CNA header field required.')
          done()
        })
    })

    it('Submitter undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-SUBMITTER']
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(testHeaders)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-SUBMITTER header field required.')
          done()
        })
    })

    it('Secret undefined', function (done) {
      const testHeaders = Object.assign({}, headers)
      delete testHeaders['CVE-API-SECRET']
      chai.request('http://localhost:3000')
        .post('/api/cve/CVE-2017-4024')
        .set(testHeaders)
        .send(cvePublicFail)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Bad Request: CVE-API-SECRET header field required.')
          done()
        })
    })
  })
})
