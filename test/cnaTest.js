const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const Cna = require('../src/model/cna')
const headers = require('./constants').headers
const existingCna = require('./constants').existentCna
const nonExistentCna = require('./constants').nonExistentCna

describe('Test Cna Controller', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      Cna.findOneAndRemove()
        .byShortName(nonExistentCna.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }
          done()
        })
    })
  })

  context('Creating a cna', () => {
    it('Shortname is undefined', (done) => {
      const testCna = Object.assign({}, existingCna)
      delete testCna.short_name
      chai.request('http://localhost:3000')
        .post('/api/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s short name to create the cna.')
          done()
        })
    })

    it('Name is undefined', (done) => {
      const testCna = Object.assign({}, existingCna)
      delete testCna.name
      chai.request('http://localhost:3000')
        .post('/api/cna')
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('Provide the cna\'s name to create the cna.')
          done()
        })
    })

    it('Cna is created in MongoDB', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna')
        .set(headers)
        .send(nonExistentCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentCna.short_name + ' CNA was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('short_name').to.equal(nonExistentCna.short_name)
          done()
        })
    })

    it('Cna is not created in MongoDB because it already exists', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna')
        .set(headers)
        .send(existingCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingCna.short_name + ' CNA already exists.')
          done()
        })
    })
  })

  context('Updating a cna', () => {
    it('Shortname is undefined', (done) => {
      const testCna = Object.assign({}, existingCna)
      delete testCna.short_name
      chai.request('http://localhost:3000')
        .post('/api/cna/' + existingCna.short_name)
        .set(headers)
        .send(testCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingCna.short_name + ' CNA was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('short_name').to.equal(existingCna.short_name)
          done()
        })
    })

    it('Shortname is defined', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna/' + existingCna.short_name)
        .set(headers)
        .send(existingCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingCna.short_name + ' CNA was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('short_name').to.equal(existingCna.short_name)
          done()
        })
    })

    it('Cna is not updated in MongoDB because it does not exists', (done) => {
      Cna.findOneAndRemove()
        .byShortName(nonExistentCna.short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          chai.request('http://localhost:3000')
            .post('/api/cna/' + nonExistentCna.short_name)
            .set(headers)
            .send(nonExistentCna)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentCna.short_name + ' CNA does not exist.')
              done()
            })
        })
    })
  })

  context('Getting a cna', () => {
    it('Cna does not exists in MongoDB', (done) => {
      chai.request('http://localhost:3000')
        .get('/api/cna/' + nonExistentCna.short_name)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentCna.short_name + ' CNA does not exist.')
          done()
        })
    })

    it('Cna exists in MongoDB', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna')
        .set(headers)
        .send(nonExistentCna)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          chai.request('http://localhost:3000')
            .get('/api/cna/' + existingCna.short_name)
            .set(headers)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('short_name').and.to.equal(existingCna.short_name)
              done()
            })
        })
    })
  })

  context('Getting all cnas', () => {
    it('Cnas exists', (done) => {
      Cna.estimatedDocumentCount((err, count) => {
        if (err) {
          done(err)
        }

        chai.request('http://localhost:3000')
          .get('/api/cna')
          .set(headers)
          .end((err, res) => {
            if (err) {
              done(err)
            }

            expect(res).to.have.status(200)
            expect(res).to.have.property('body').and.to.be.a('array')
            expect(res.body).to.have.lengthOf(count)
            done()
          })
      })
    })

    // it('Cnas do not exists', (done) => {
    //   Cna.deleteMany({}, (err) => {
    //     if (err) {
    //       done(err)
    //     }

    //     chai.request('http://localhost:3000')
    //       .get('/api/cna')
    //       .set(headers)
    //       .end((err, res) => {
    //         if (err) {
    //           done(err)
    //         }

    //         expect(res).to.have.status(200)
    //         expect(res).to.have.property('body').and.to.be.a('array')
    //         expect(res.body).to.have.lengthOf(0)
    //         done()
    //       })
    //   })
    // })
  })

  after((done) => {
    Cna.findOneAndRemove()
      .byShortName(nonExistentCna.short_name)
      .exec((err) => {
        if (err) {
          done(err)
        }

        mongoose.connection.close(done)
      })
  })
})
