const chai = require('chai')
const expect = chai.expect
chai.use(require('chai-http'))
const mongoose = require('mongoose')
const User = require('../src/model/user')
const headers = require('./constants').headers
const existingUser = require('./constants').existentUser
const nonExistentUser = require('./constants').nonExistentUser

describe('Test cna create and update in Cna Controller', () => {
  before((done) => {
    mongoose.connect('mongodb://localhost:27017/cve_test', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      useFindAndModify: false
    })
    const db = mongoose.connection
    db.on('error', console.error.bind(console, 'connection error'))
    db.once('open', () => {
      User.findOneAndRemove()
        .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }
          done()
        })
    })
  })

  context('Creating a user', () => {
    it('Username is undefined', (done) => {
      const testUser = Object.assign({}, existingUser)
      delete testUser.username
      chai.request('http://localhost:3000')
        .post('/api/cna/' + testUser.cna_short_name + '/user')
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('To create a user, a username must be provided.')
          done()
        })
    })

    it('User is created in MongoDB when cna shortname is undefined', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      delete testUser.cna_short_name
      chai.request('http://localhost:3000')
        .post('/api/cna/' + nonExistentUser.cna_short_name + '/user')
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
          expect(res.body).to.have.property('created').and.to.be.a('object')
          expect(res.body.created).to.have.property('cna_short_name').and.to.equal(nonExistentUser.cna_short_name)
          expect(res.body.created).to.have.property('username').and.to.equal(nonExistentUser.username)
          done()
        })
    })

    it('User is created in MongoDB when cna shortname is defined', (done) => {
      User.findOneAndRemove()
        .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          chai.request('http://localhost:3000')
            .post('/api/cna/' + nonExistentUser.cna_short_name + '/user')
            .set(headers)
            .send(nonExistentUser)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(200)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentUser.username + ' was successfully created.')
              expect(res.body).to.have.property('created').and.to.be.a('object')
              expect(res.body.created).to.have.property('cna_short_name').and.to.equal(nonExistentUser.cna_short_name)
              expect(res.body.created).to.have.property('username').and.to.equal(nonExistentUser.username)
              done()
            })
        })
    })

    it('Shortname does not match', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna/' + nonExistentUser.cna_short_name + '/user')
        .set(headers)
        .send(existingUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.cna_short_name + ' URL parameter does not match ' + existingUser.cna_short_name + ' in the JSON body.')
          done()
        })
    })

    it('Cna does not exists', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      testUser.cna_short_name = 'alibaba'
      chai.request('http://localhost:3000')
        .post('/api/cna/' + testUser.cna_short_name + '/user')
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal('The user could not be created because ' + testUser.cna_short_name + ' CNA does not exist.')
          done()
        })
    })

    it('User is not created in MongoDB because it already exists', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna/' + existingUser.cna_short_name + '/user')
        .set(headers)
        .send(existingUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(400)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingUser.username + ' already exists.')
          done()
        })
    })
  })

  context('Updating a user', () => {
    it('Update user when cna shortname is undefined', (done) => {
      const testUser = Object.assign({}, existingUser)
      delete testUser.cna_short_name
      chai.request('http://localhost:3000')
        .post('/api/cna/' + existingUser.cna_short_name + '/user/' + testUser.username)
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(testUser.username + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('cna_short_name').to.equal(existingUser.cna_short_name)
          done()
        })
    })

    it('Update user when username is undefined', (done) => {
      const testUser = Object.assign({}, existingUser)
      delete testUser.username
      chai.request('http://localhost:3000')
        .post('/api/cna/' + testUser.cna_short_name + '/user/' + existingUser.username)
        .set(headers)
        .send(testUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingUser.username + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('cna_short_name').to.equal(testUser.cna_short_name)
          done()
        })
    })

    it('Update user when username or cna shortname is defined', (done) => {
      chai.request('http://localhost:3000')
        .post('/api/cna/' + existingUser.cna_short_name + '/user/' + existingUser.username)
        .set(headers)
        .send(existingUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(existingUser.username + ' was successfully updated.')
          expect(res.body).to.have.property('updated').and.to.be.a('object')
          expect(res.body.updated).to.have.property('cna_short_name').to.equal(existingUser.cna_short_name)
          done()
        })
    })

    it('User is not updated in MongoDB because it does not exists', (done) => {
      const testUser = Object.assign({}, nonExistentUser)
      testUser.cna_short_name = 'alibaba'
      chai.request('http://localhost:3000')
        .post('/api/cna/' + testUser.cna_short_name + '/user/' + nonExistentUser.username)
        .set(headers)
        .send(nonExistentUser)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(404)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('message').and.to.be.a('string')
          expect(res.body.message).to.equal(nonExistentUser.username + ' could not be found.')
          done()
        })
    })
  })

  context('Getting a user', () => {
    it('User exists in MongoDB', (done) => {
      chai.request('http://localhost:3000')
        .get('/api/cna/' + existingUser.cna_short_name + '/user/' + existingUser.username)
        .set(headers)
        .end((err, res) => {
          if (err) {
            done(err)
          }

          expect(res).to.have.status(200)
          expect(res).to.have.property('body').and.to.be.a('object')
          expect(res.body).to.have.property('username').and.to.equal(existingUser.username)
          expect(res.body).to.have.property('cna_short_name').and.to.equal(existingUser.cna_short_name)
          done()
        })
    })

    it('Cna does not exists in MongoDB', (done) => {
      User.findOneAndRemove()
        .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
        .exec((err) => {
          if (err) {
            done(err)
          }

          chai.request('http://localhost:3000')
            .get('/api/cna/' + nonExistentUser.cna_short_name + '/user/' + nonExistentUser.username)
            .set(headers)
            .end((err, res) => {
              if (err) {
                done(err)
              }

              expect(res).to.have.status(404)
              expect(res).to.have.property('body').and.to.be.a('object')
              expect(res.body).to.have.property('message').and.to.be.a('string')
              expect(res.body.message).to.equal(nonExistentUser.username + ' does not exist.')
              done()
            })
        })
    })
  })

  after((done) => {
    User.findOneAndRemove()
      .byUserNameAndCnaShortName(nonExistentUser.username, nonExistentUser.cna_short_name)
      .exec((err) => {
        if (err) {
          done(err)
        }

        mongoose.connection.close(done)
      })
  })
})
